
F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006508  08006508  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08006508  08006508  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006508  08006508  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200000b4  080065c4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080065c4  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bf0  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b52  00000000  00000000  00032ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000368e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001962f  00000000  00000000  00037850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ec8  00000000  00000000  00050e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de3a  00000000  00000000  00066d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004798  00000000  00000000  000f4bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08006334 	.word	0x08006334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08006334 	.word	0x08006334

0800014c <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000d0 	.word	0x200000d0

08000170 <isButton2Pressed>:

int isButton2Pressed() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000d4 	.word	0x200000d4

08000194 <isButton3Pressed>:

int isButton3Pressed() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000d8 	.word	0x200000d8

080001b8 <getKeyInput>:

void getKeyInput() {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

	KeyRegB1_0 = KeyRegB1_1;
 80001bc:	4b67      	ldr	r3, [pc, #412]	; (800035c <getKeyInput+0x1a4>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a67      	ldr	r2, [pc, #412]	; (8000360 <getKeyInput+0x1a8>)
 80001c2:	6013      	str	r3, [r2, #0]
	KeyRegB1_1 = KeyRegB1_2;
 80001c4:	4b67      	ldr	r3, [pc, #412]	; (8000364 <getKeyInput+0x1ac>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a64      	ldr	r2, [pc, #400]	; (800035c <getKeyInput+0x1a4>)
 80001ca:	6013      	str	r3, [r2, #0]
	KeyRegB1_2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4865      	ldr	r0, [pc, #404]	; (8000368 <getKeyInput+0x1b0>)
 80001d2:	f002 f951 	bl	8002478 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b62      	ldr	r3, [pc, #392]	; (8000364 <getKeyInput+0x1ac>)
 80001dc:	601a      	str	r2, [r3, #0]

	KeyRegB2_0 = KeyRegB2_1;
 80001de:	4b63      	ldr	r3, [pc, #396]	; (800036c <getKeyInput+0x1b4>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a63      	ldr	r2, [pc, #396]	; (8000370 <getKeyInput+0x1b8>)
 80001e4:	6013      	str	r3, [r2, #0]
	KeyRegB2_1 = KeyRegB2_2;
 80001e6:	4b63      	ldr	r3, [pc, #396]	; (8000374 <getKeyInput+0x1bc>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a60      	ldr	r2, [pc, #384]	; (800036c <getKeyInput+0x1b4>)
 80001ec:	6013      	str	r3, [r2, #0]
	KeyRegB2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ee:	2102      	movs	r1, #2
 80001f0:	4861      	ldr	r0, [pc, #388]	; (8000378 <getKeyInput+0x1c0>)
 80001f2:	f002 f941 	bl	8002478 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b5e      	ldr	r3, [pc, #376]	; (8000374 <getKeyInput+0x1bc>)
 80001fc:	601a      	str	r2, [r3, #0]

	KeyRegB3_0 = KeyRegB3_1;
 80001fe:	4b5f      	ldr	r3, [pc, #380]	; (800037c <getKeyInput+0x1c4>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a5f      	ldr	r2, [pc, #380]	; (8000380 <getKeyInput+0x1c8>)
 8000204:	6013      	str	r3, [r2, #0]
	KeyRegB3_1 = KeyRegB3_2;
 8000206:	4b5f      	ldr	r3, [pc, #380]	; (8000384 <getKeyInput+0x1cc>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a5c      	ldr	r2, [pc, #368]	; (800037c <getKeyInput+0x1c4>)
 800020c:	6013      	str	r3, [r2, #0]
	KeyRegB3_2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 800020e:	2110      	movs	r1, #16
 8000210:	4859      	ldr	r0, [pc, #356]	; (8000378 <getKeyInput+0x1c0>)
 8000212:	f002 f931 	bl	8002478 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	4b5a      	ldr	r3, [pc, #360]	; (8000384 <getKeyInput+0x1cc>)
 800021c:	601a      	str	r2, [r3, #0]

	// xu ly button 1
	if ((KeyRegB1_0 == KeyRegB1_1) && (KeyRegB1_1 == KeyRegB1_2)) {
 800021e:	4b50      	ldr	r3, [pc, #320]	; (8000360 <getKeyInput+0x1a8>)
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	4b4e      	ldr	r3, [pc, #312]	; (800035c <getKeyInput+0x1a4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	429a      	cmp	r2, r3
 8000228:	d12d      	bne.n	8000286 <getKeyInput+0xce>
 800022a:	4b4c      	ldr	r3, [pc, #304]	; (800035c <getKeyInput+0x1a4>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <getKeyInput+0x1ac>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d127      	bne.n	8000286 <getKeyInput+0xce>
		if (KeyRegB1_3 != KeyRegB1_2) {
 8000236:	4b54      	ldr	r3, [pc, #336]	; (8000388 <getKeyInput+0x1d0>)
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b4a      	ldr	r3, [pc, #296]	; (8000364 <getKeyInput+0x1ac>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	429a      	cmp	r2, r3
 8000240:	d00e      	beq.n	8000260 <getKeyInput+0xa8>
			KeyRegB1_3 = KeyRegB1_2;
 8000242:	4b48      	ldr	r3, [pc, #288]	; (8000364 <getKeyInput+0x1ac>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a50      	ldr	r2, [pc, #320]	; (8000388 <getKeyInput+0x1d0>)
 8000248:	6013      	str	r3, [r2, #0]

			if (KeyRegB1_2 == PRESSED_STATE) {
 800024a:	4b46      	ldr	r3, [pc, #280]	; (8000364 <getKeyInput+0x1ac>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d119      	bne.n	8000286 <getKeyInput+0xce>
				TimeOutForKeyPress = 200;
 8000252:	4b4e      	ldr	r3, [pc, #312]	; (800038c <getKeyInput+0x1d4>)
 8000254:	22c8      	movs	r2, #200	; 0xc8
 8000256:	601a      	str	r2, [r3, #0]
				button1_flag = 1;
 8000258:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <getKeyInput+0x1d8>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	e012      	b.n	8000286 <getKeyInput+0xce>
			}

		} else {
			TimeOutForKeyPress--;
 8000260:	4b4a      	ldr	r3, [pc, #296]	; (800038c <getKeyInput+0x1d4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a49      	ldr	r2, [pc, #292]	; (800038c <getKeyInput+0x1d4>)
 8000268:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 800026a:	4b48      	ldr	r3, [pc, #288]	; (800038c <getKeyInput+0x1d4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d109      	bne.n	8000286 <getKeyInput+0xce>
				TimeOutForKeyPress = 200;
 8000272:	4b46      	ldr	r3, [pc, #280]	; (800038c <getKeyInput+0x1d4>)
 8000274:	22c8      	movs	r2, #200	; 0xc8
 8000276:	601a      	str	r2, [r3, #0]
				if (KeyRegB1_2 == PRESSED_STATE) {
 8000278:	4b3a      	ldr	r3, [pc, #232]	; (8000364 <getKeyInput+0x1ac>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d102      	bne.n	8000286 <getKeyInput+0xce>
					button1_flag = 1;
 8000280:	4b43      	ldr	r3, [pc, #268]	; (8000390 <getKeyInput+0x1d8>)
 8000282:	2201      	movs	r2, #1
 8000284:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 2
	if ((KeyRegB2_0 == KeyRegB2_1) && (KeyRegB2_1 == KeyRegB2_2)) {
 8000286:	4b3a      	ldr	r3, [pc, #232]	; (8000370 <getKeyInput+0x1b8>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b38      	ldr	r3, [pc, #224]	; (800036c <getKeyInput+0x1b4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d12d      	bne.n	80002ee <getKeyInput+0x136>
 8000292:	4b36      	ldr	r3, [pc, #216]	; (800036c <getKeyInput+0x1b4>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b37      	ldr	r3, [pc, #220]	; (8000374 <getKeyInput+0x1bc>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d127      	bne.n	80002ee <getKeyInput+0x136>
		if (KeyRegB2_3 != KeyRegB2_2) {
 800029e:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <getKeyInput+0x1dc>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b34      	ldr	r3, [pc, #208]	; (8000374 <getKeyInput+0x1bc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d00e      	beq.n	80002c8 <getKeyInput+0x110>
			KeyRegB2_3 = KeyRegB2_2;
 80002aa:	4b32      	ldr	r3, [pc, #200]	; (8000374 <getKeyInput+0x1bc>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a39      	ldr	r2, [pc, #228]	; (8000394 <getKeyInput+0x1dc>)
 80002b0:	6013      	str	r3, [r2, #0]

			if (KeyRegB2_2 == PRESSED_STATE) {
 80002b2:	4b30      	ldr	r3, [pc, #192]	; (8000374 <getKeyInput+0x1bc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d119      	bne.n	80002ee <getKeyInput+0x136>
				TimeOutForKeyPress = 200;
 80002ba:	4b34      	ldr	r3, [pc, #208]	; (800038c <getKeyInput+0x1d4>)
 80002bc:	22c8      	movs	r2, #200	; 0xc8
 80002be:	601a      	str	r2, [r3, #0]
				button2_flag = 1;
 80002c0:	4b35      	ldr	r3, [pc, #212]	; (8000398 <getKeyInput+0x1e0>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e012      	b.n	80002ee <getKeyInput+0x136>
			}

		} else {
			TimeOutForKeyPress--;
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <getKeyInput+0x1d4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a2f      	ldr	r2, [pc, #188]	; (800038c <getKeyInput+0x1d4>)
 80002d0:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 80002d2:	4b2e      	ldr	r3, [pc, #184]	; (800038c <getKeyInput+0x1d4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d109      	bne.n	80002ee <getKeyInput+0x136>
				TimeOutForKeyPress = 200;
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <getKeyInput+0x1d4>)
 80002dc:	22c8      	movs	r2, #200	; 0xc8
 80002de:	601a      	str	r2, [r3, #0]
				if (KeyRegB2_2 == PRESSED_STATE) {
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <getKeyInput+0x1bc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <getKeyInput+0x136>
					button2_flag = 1;
 80002e8:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <getKeyInput+0x1e0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	// xu ly button 3
	if ((KeyRegB3_0 == KeyRegB3_1) && (KeyRegB3_1 == KeyRegB3_2)) {
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <getKeyInput+0x1c8>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <getKeyInput+0x1c4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d12d      	bne.n	8000356 <getKeyInput+0x19e>
 80002fa:	4b20      	ldr	r3, [pc, #128]	; (800037c <getKeyInput+0x1c4>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <getKeyInput+0x1cc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	429a      	cmp	r2, r3
 8000304:	d127      	bne.n	8000356 <getKeyInput+0x19e>
		if (KeyRegB3_3 != KeyRegB3_2) {
 8000306:	4b25      	ldr	r3, [pc, #148]	; (800039c <getKeyInput+0x1e4>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <getKeyInput+0x1cc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	429a      	cmp	r2, r3
 8000310:	d00e      	beq.n	8000330 <getKeyInput+0x178>
			KeyRegB3_3 = KeyRegB3_2;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <getKeyInput+0x1cc>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a21      	ldr	r2, [pc, #132]	; (800039c <getKeyInput+0x1e4>)
 8000318:	6013      	str	r3, [r2, #0]

			if (KeyRegB3_2 == PRESSED_STATE) {
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <getKeyInput+0x1cc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d119      	bne.n	8000356 <getKeyInput+0x19e>
				TimeOutForKeyPress = 200;
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <getKeyInput+0x1d4>)
 8000324:	22c8      	movs	r2, #200	; 0xc8
 8000326:	601a      	str	r2, [r3, #0]
				button3_flag = 1;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <getKeyInput+0x1e8>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
				}
			}
		}
	}
}
 800032e:	e012      	b.n	8000356 <getKeyInput+0x19e>
			TimeOutForKeyPress--;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <getKeyInput+0x1d4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3b01      	subs	r3, #1
 8000336:	4a15      	ldr	r2, [pc, #84]	; (800038c <getKeyInput+0x1d4>)
 8000338:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) {
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <getKeyInput+0x1d4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d109      	bne.n	8000356 <getKeyInput+0x19e>
				TimeOutForKeyPress = 200;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <getKeyInput+0x1d4>)
 8000344:	22c8      	movs	r2, #200	; 0xc8
 8000346:	601a      	str	r2, [r3, #0]
				if (KeyRegB3_2 == PRESSED_STATE) {
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <getKeyInput+0x1cc>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <getKeyInput+0x19e>
					button3_flag = 1;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <getKeyInput+0x1e8>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000004 	.word	0x20000004
 8000360:	20000000 	.word	0x20000000
 8000364:	20000008 	.word	0x20000008
 8000368:	40011000 	.word	0x40011000
 800036c:	20000014 	.word	0x20000014
 8000370:	20000010 	.word	0x20000010
 8000374:	20000018 	.word	0x20000018
 8000378:	40010800 	.word	0x40010800
 800037c:	20000024 	.word	0x20000024
 8000380:	20000020 	.word	0x20000020
 8000384:	20000028 	.word	0x20000028
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000030 	.word	0x20000030
 8000390:	200000d0 	.word	0x200000d0
 8000394:	2000001c 	.word	0x2000001c
 8000398:	200000d4 	.word	0x200000d4
 800039c:	2000002c 	.word	0x2000002c
 80003a0:	200000d8 	.word	0x200000d8

080003a4 <init_display>:
 */
#include "display_time.h"

#include <stdio.h>

void init_display(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	   lcd_goto_XY(1, 0);
 80003a8:	2100      	movs	r1, #0
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 fe76 	bl	800109c <lcd_goto_XY>
	   lcd_send_string("Time 1 : ");
 80003b0:	4805      	ldr	r0, [pc, #20]	; (80003c8 <init_display+0x24>)
 80003b2:	f000 fe57 	bl	8001064 <lcd_send_string>
	   lcd_goto_XY(2, 0);
 80003b6:	2100      	movs	r1, #0
 80003b8:	2002      	movs	r0, #2
 80003ba:	f000 fe6f 	bl	800109c <lcd_goto_XY>
	   lcd_send_string("Time 2 :");
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <init_display+0x28>)
 80003c0:	f000 fe50 	bl	8001064 <lcd_send_string>
	  // display_lcd_r1(0);
	  // display_lcd_r2(0);
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	0800634c 	.word	0x0800634c
 80003cc:	08006358 	.word	0x08006358

080003d0 <display_lcd_r1>:
void display_lcd_r1(int num){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    char buffer[3];
    sprintf(buffer, "%02d", num);
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	4908      	ldr	r1, [pc, #32]	; (8000400 <display_lcd_r1+0x30>)
 80003e0:	4618      	mov	r0, r3
 80003e2:	f005 fb6d 	bl	8005ac0 <siprintf>
    lcd_goto_XY(1, 10);
 80003e6:	210a      	movs	r1, #10
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 fe57 	bl	800109c <lcd_goto_XY>
    lcd_send_string(buffer);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fe36 	bl	8001064 <lcd_send_string>
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	08006364 	.word	0x08006364

08000404 <display_lcd_r2>:

void display_lcd_r2(int num){
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    char buffer[3];
    sprintf(buffer, "%02d", num);
 800040c:	f107 030c 	add.w	r3, r7, #12
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4908      	ldr	r1, [pc, #32]	; (8000434 <display_lcd_r2+0x30>)
 8000414:	4618      	mov	r0, r3
 8000416:	f005 fb53 	bl	8005ac0 <siprintf>
    lcd_goto_XY(2, 10);
 800041a:	210a      	movs	r1, #10
 800041c:	2002      	movs	r0, #2
 800041e:	f000 fe3d 	bl	800109c <lcd_goto_XY>
    lcd_send_string(buffer);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fe1c 	bl	8001064 <lcd_send_string>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	08006364 	.word	0x08006364

08000438 <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "light_traffic.h"
#include "display_time.h"
#include "i2c-lcd.h"
#include "button.h"
void fsm_automatic_run(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	switch (status) {
 800043c:	4b90      	ldr	r3, [pc, #576]	; (8000680 <fsm_automatic_run+0x248>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3b01      	subs	r3, #1
 8000442:	2b0b      	cmp	r3, #11
 8000444:	f200 8204 	bhi.w	8000850 <fsm_automatic_run+0x418>
 8000448:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_automatic_run+0x18>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	080004ed 	.word	0x080004ed
 8000454:	080005af 	.word	0x080005af
 8000458:	080006a9 	.word	0x080006a9
 800045c:	0800076b 	.word	0x0800076b
 8000460:	08000851 	.word	0x08000851
 8000464:	08000851 	.word	0x08000851
 8000468:	08000851 	.word	0x08000851
 800046c:	08000851 	.word	0x08000851
 8000470:	08000851 	.word	0x08000851
 8000474:	08000851 	.word	0x08000851
 8000478:	08000481 	.word	0x08000481
 800047c:	080004bb 	.word	0x080004bb
	case INIT:
		clear_all_traffic_light();
 8000480:	f000 fe2e 	bl	80010e0 <clear_all_traffic_light>
		lcd_init();
 8000484:	f000 fdc0 	bl	8001008 <lcd_init>
		init_traffic_light_time(RED_TIME,YELLOW_TIME,GREEN_TIME);
 8000488:	4b7e      	ldr	r3, [pc, #504]	; (8000684 <fsm_automatic_run+0x24c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a7e      	ldr	r2, [pc, #504]	; (8000688 <fsm_automatic_run+0x250>)
 800048e:	6811      	ldr	r1, [r2, #0]
 8000490:	4a7e      	ldr	r2, [pc, #504]	; (800068c <fsm_automatic_run+0x254>)
 8000492:	6812      	ldr	r2, [r2, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 ff77 	bl	8001388 <init_traffic_light_time>
		if(isButton1Pressed() == 1){
 800049a:	f7ff fe57 	bl	800014c <isButton1Pressed>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	f040 81ca 	bne.w	800083a <fsm_automatic_run+0x402>
		    lcd_send_string("MODE 1:AUTOMATIC");
 80004a6:	487a      	ldr	r0, [pc, #488]	; (8000690 <fsm_automatic_run+0x258>)
 80004a8:	f000 fddc 	bl	8001064 <lcd_send_string>
			status = MODE_1;
 80004ac:	4b74      	ldr	r3, [pc, #464]	; (8000680 <fsm_automatic_run+0x248>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
			sch_counter = 1;
 80004b2:	4b78      	ldr	r3, [pc, #480]	; (8000694 <fsm_automatic_run+0x25c>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80004b8:	e1bf      	b.n	800083a <fsm_automatic_run+0x402>
	case MODE_1:
		lcd_init();
 80004ba:	f000 fda5 	bl	8001008 <lcd_init>
		if(sch_counter > 0){
 80004be:	4b75      	ldr	r3, [pc, #468]	; (8000694 <fsm_automatic_run+0x25c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	dd04      	ble.n	80004d0 <fsm_automatic_run+0x98>
			sch_counter --;
 80004c6:	4b73      	ldr	r3, [pc, #460]	; (8000694 <fsm_automatic_run+0x25c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a71      	ldr	r2, [pc, #452]	; (8000694 <fsm_automatic_run+0x25c>)
 80004ce:	6013      	str	r3, [r2, #0]
		}
		if(sch_counter == 0){
 80004d0:	4b70      	ldr	r3, [pc, #448]	; (8000694 <fsm_automatic_run+0x25c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	f040 81b2 	bne.w	800083e <fsm_automatic_run+0x406>
			init_display();
 80004da:	f7ff ff63 	bl	80003a4 <init_display>
			status = RED_GREEN;
 80004de:	4b68      	ldr	r3, [pc, #416]	; (8000680 <fsm_automatic_run+0x248>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
			sch_counter = 1;
 80004e4:	4b6b      	ldr	r3, [pc, #428]	; (8000694 <fsm_automatic_run+0x25c>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
		}

		break;
 80004ea:	e1a8      	b.n	800083e <fsm_automatic_run+0x406>
	case RED_GREEN:
	    if (sch_counter > 0) {
 80004ec:	4b69      	ldr	r3, [pc, #420]	; (8000694 <fsm_automatic_run+0x25c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd04      	ble.n	80004fe <fsm_automatic_run+0xc6>
	        sch_counter--;
 80004f4:	4b67      	ldr	r3, [pc, #412]	; (8000694 <fsm_automatic_run+0x25c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a66      	ldr	r2, [pc, #408]	; (8000694 <fsm_automatic_run+0x25c>)
 80004fc:	6013      	str	r3, [r2, #0]
	    }
	    if (sch_counter == 0) {
 80004fe:	4b65      	ldr	r3, [pc, #404]	; (8000694 <fsm_automatic_run+0x25c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d135      	bne.n	8000572 <fsm_automatic_run+0x13a>
	        traffic_light_1_run(RED);
 8000506:	2017      	movs	r0, #23
 8000508:	f000 fe20 	bl	800114c <traffic_light_1_run>
	        traffic_light_2_run(RED);
 800050c:	2017      	movs	r0, #23
 800050e:	f000 fe61 	bl	80011d4 <traffic_light_2_run>
	        traffic_light_3_run(GREEN);
 8000512:	2019      	movs	r0, #25
 8000514:	f000 fea6 	bl	8001264 <traffic_light_3_run>
	        traffic_light_4_run(GREEN);
 8000518:	2019      	movs	r0, #25
 800051a:	f000 feef 	bl	80012fc <traffic_light_4_run>

	        // Giảm thời gian đỏ
	        if (red_time > 0) {
 800051e:	4b5e      	ldr	r3, [pc, #376]	; (8000698 <fsm_automatic_run+0x260>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	dd09      	ble.n	800053a <fsm_automatic_run+0x102>
	            display_lcd_r1(red_time);
 8000526:	4b5c      	ldr	r3, [pc, #368]	; (8000698 <fsm_automatic_run+0x260>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff50 	bl	80003d0 <display_lcd_r1>
	            red_time--;
 8000530:	4b59      	ldr	r3, [pc, #356]	; (8000698 <fsm_automatic_run+0x260>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a58      	ldr	r2, [pc, #352]	; (8000698 <fsm_automatic_run+0x260>)
 8000538:	6013      	str	r3, [r2, #0]
	        }
	        // Giảm thời gian xanh
	        if (green_time > 0) {
 800053a:	4b58      	ldr	r3, [pc, #352]	; (800069c <fsm_automatic_run+0x264>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	dd14      	ble.n	800056c <fsm_automatic_run+0x134>
	            display_lcd_r2(green_time);
 8000542:	4b56      	ldr	r3, [pc, #344]	; (800069c <fsm_automatic_run+0x264>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff5c 	bl	8000404 <display_lcd_r2>
	            green_time--;
 800054c:	4b53      	ldr	r3, [pc, #332]	; (800069c <fsm_automatic_run+0x264>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a52      	ldr	r2, [pc, #328]	; (800069c <fsm_automatic_run+0x264>)
 8000554:	6013      	str	r3, [r2, #0]
	        // Chỉ chuyển trạng thái khi xanh hết time
	        if (green_time == 0) {
 8000556:	4b51      	ldr	r3, [pc, #324]	; (800069c <fsm_automatic_run+0x264>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d106      	bne.n	800056c <fsm_automatic_run+0x134>
	        	green_time = GREEN_TIME;
 800055e:	4b4b      	ldr	r3, [pc, #300]	; (800068c <fsm_automatic_run+0x254>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a4e      	ldr	r2, [pc, #312]	; (800069c <fsm_automatic_run+0x264>)
 8000564:	6013      	str	r3, [r2, #0]
	            status = RED_YELLOW;
 8000566:	4b46      	ldr	r3, [pc, #280]	; (8000680 <fsm_automatic_run+0x248>)
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]
	        }
	    }	        // Đặt lại bộ đếm
	     sch_counter = 1;
 800056c:	4b49      	ldr	r3, [pc, #292]	; (8000694 <fsm_automatic_run+0x25c>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]
	}
		if(isButton1Pressed() == 1){
 8000572:	f7ff fdeb 	bl	800014c <isButton1Pressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	f040 8162 	bne.w	8000842 <fsm_automatic_run+0x40a>
			//clear_all_traffic_light();
			traffic_light_1_run(RED);
 800057e:	2017      	movs	r0, #23
 8000580:	f000 fde4 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000584:	2017      	movs	r0, #23
 8000586:	f000 fe25 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 800058a:	2017      	movs	r0, #23
 800058c:	f000 fe6a 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 8000590:	2017      	movs	r0, #23
 8000592:	f000 feb3 	bl	80012fc <traffic_light_4_run>
		    //lcd_send_string("MODE 2:SET RED");
			lcd_init();
 8000596:	f000 fd37 	bl	8001008 <lcd_init>
			lcd_send_string("MODE 2:SET RED");
 800059a:	4841      	ldr	r0, [pc, #260]	; (80006a0 <fsm_automatic_run+0x268>)
 800059c:	f000 fd62 	bl	8001064 <lcd_send_string>
			status = MODE_2;
 80005a0:	4b37      	ldr	r3, [pc, #220]	; (8000680 <fsm_automatic_run+0x248>)
 80005a2:	220d      	movs	r2, #13
 80005a4:	601a      	str	r2, [r3, #0]
			sch_counter = 2;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <fsm_automatic_run+0x25c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	601a      	str	r2, [r3, #0]
		}
	    break;
 80005ac:	e149      	b.n	8000842 <fsm_automatic_run+0x40a>
	case RED_YELLOW:
	    if (sch_counter > 0) {
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <fsm_automatic_run+0x25c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dd04      	ble.n	80005c0 <fsm_automatic_run+0x188>
	        sch_counter--;
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <fsm_automatic_run+0x25c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a35      	ldr	r2, [pc, #212]	; (8000694 <fsm_automatic_run+0x25c>)
 80005be:	6013      	str	r3, [r2, #0]
	    }
	    if (sch_counter == 0) {
 80005c0:	4b34      	ldr	r3, [pc, #208]	; (8000694 <fsm_automatic_run+0x25c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d13d      	bne.n	8000644 <fsm_automatic_run+0x20c>
	        traffic_light_1_run(RED);
 80005c8:	2017      	movs	r0, #23
 80005ca:	f000 fdbf 	bl	800114c <traffic_light_1_run>
	        traffic_light_2_run(RED);
 80005ce:	2017      	movs	r0, #23
 80005d0:	f000 fe00 	bl	80011d4 <traffic_light_2_run>
	        traffic_light_3_run(YELLOW);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f000 fe45 	bl	8001264 <traffic_light_3_run>
	        traffic_light_4_run(YELLOW);
 80005da:	2018      	movs	r0, #24
 80005dc:	f000 fe8e 	bl	80012fc <traffic_light_4_run>

	        // Giảm thời gian đỏ
	        if (red_time > 0) {
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <fsm_automatic_run+0x260>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dd09      	ble.n	80005fc <fsm_automatic_run+0x1c4>
	            display_lcd_r1(red_time);
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <fsm_automatic_run+0x260>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff feef 	bl	80003d0 <display_lcd_r1>
	            red_time--;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <fsm_automatic_run+0x260>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <fsm_automatic_run+0x260>)
 80005fa:	6013      	str	r3, [r2, #0]
	        }
	        // Giảm thời gian xanh
	        if (yellow_time > 0) {
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <fsm_automatic_run+0x26c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	dd1c      	ble.n	800063e <fsm_automatic_run+0x206>
	            display_lcd_r2(yellow_time);
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <fsm_automatic_run+0x26c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fefb 	bl	8000404 <display_lcd_r2>
	            yellow_time--;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <fsm_automatic_run+0x26c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <fsm_automatic_run+0x26c>)
 8000616:	6013      	str	r3, [r2, #0]
	        // Chỉ chuyển trạng thái khi xanh hết time
	        if (red_time == 0 && yellow_time == 0) {
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <fsm_automatic_run+0x260>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10e      	bne.n	800063e <fsm_automatic_run+0x206>
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <fsm_automatic_run+0x26c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10a      	bne.n	800063e <fsm_automatic_run+0x206>
	        	red_time = RED_TIME;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <fsm_automatic_run+0x24c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <fsm_automatic_run+0x260>)
 800062e:	6013      	str	r3, [r2, #0]
	        	yellow_time = YELLOW_TIME;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <fsm_automatic_run+0x250>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <fsm_automatic_run+0x26c>)
 8000636:	6013      	str	r3, [r2, #0]
	            status = GREEN_RED;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <fsm_automatic_run+0x248>)
 800063a:	2203      	movs	r2, #3
 800063c:	601a      	str	r2, [r3, #0]
	        }
	    }	        // Đặt lại bộ đếm
	     sch_counter = 1;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <fsm_automatic_run+0x25c>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
	}
		if(isButton1Pressed() == 1){
 8000644:	f7ff fd82 	bl	800014c <isButton1Pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	f040 80fb 	bne.w	8000846 <fsm_automatic_run+0x40e>
			//clear_all_traffic_light();
			traffic_light_1_run(RED);
 8000650:	2017      	movs	r0, #23
 8000652:	f000 fd7b 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000656:	2017      	movs	r0, #23
 8000658:	f000 fdbc 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 800065c:	2017      	movs	r0, #23
 800065e:	f000 fe01 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 8000662:	2017      	movs	r0, #23
 8000664:	f000 fe4a 	bl	80012fc <traffic_light_4_run>
		    //lcd_send_string("MODE 2:SET RED");
			lcd_init();
 8000668:	f000 fcce 	bl	8001008 <lcd_init>
			lcd_send_string("MODE 2:SET RED");
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <fsm_automatic_run+0x268>)
 800066e:	f000 fcf9 	bl	8001064 <lcd_send_string>
			status = MODE_2;
 8000672:	4b03      	ldr	r3, [pc, #12]	; (8000680 <fsm_automatic_run+0x248>)
 8000674:	220d      	movs	r2, #13
 8000676:	601a      	str	r2, [r3, #0]
			sch_counter = 2;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <fsm_automatic_run+0x25c>)
 800067a:	2202      	movs	r2, #2
 800067c:	601a      	str	r2, [r3, #0]
		}
	    break;
 800067e:	e0e2      	b.n	8000846 <fsm_automatic_run+0x40e>
 8000680:	20000034 	.word	0x20000034
 8000684:	20000038 	.word	0x20000038
 8000688:	20000040 	.word	0x20000040
 800068c:	2000003c 	.word	0x2000003c
 8000690:	0800636c 	.word	0x0800636c
 8000694:	200000dc 	.word	0x200000dc
 8000698:	200000e0 	.word	0x200000e0
 800069c:	200000e8 	.word	0x200000e8
 80006a0:	08006380 	.word	0x08006380
 80006a4:	200000e4 	.word	0x200000e4
	case GREEN_RED:
	    if (sch_counter > 0) {
 80006a8:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <fsm_automatic_run+0x41c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dd04      	ble.n	80006ba <fsm_automatic_run+0x282>
	        sch_counter--;
 80006b0:	4b68      	ldr	r3, [pc, #416]	; (8000854 <fsm_automatic_run+0x41c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a67      	ldr	r2, [pc, #412]	; (8000854 <fsm_automatic_run+0x41c>)
 80006b8:	6013      	str	r3, [r2, #0]
	    }
	    if (sch_counter == 0) {
 80006ba:	4b66      	ldr	r3, [pc, #408]	; (8000854 <fsm_automatic_run+0x41c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d135      	bne.n	800072e <fsm_automatic_run+0x2f6>
	        traffic_light_1_run(GREEN);
 80006c2:	2019      	movs	r0, #25
 80006c4:	f000 fd42 	bl	800114c <traffic_light_1_run>
	        traffic_light_2_run(GREEN);
 80006c8:	2019      	movs	r0, #25
 80006ca:	f000 fd83 	bl	80011d4 <traffic_light_2_run>
	        traffic_light_3_run(RED);
 80006ce:	2017      	movs	r0, #23
 80006d0:	f000 fdc8 	bl	8001264 <traffic_light_3_run>
	        traffic_light_4_run(RED);
 80006d4:	2017      	movs	r0, #23
 80006d6:	f000 fe11 	bl	80012fc <traffic_light_4_run>

	        // Giảm thời gian đỏ
	        if (green_time > 0) {
 80006da:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <fsm_automatic_run+0x420>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd09      	ble.n	80006f6 <fsm_automatic_run+0x2be>
	            display_lcd_r1(green_time);
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <fsm_automatic_run+0x420>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe72 	bl	80003d0 <display_lcd_r1>
	            green_time--;
 80006ec:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <fsm_automatic_run+0x420>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a59      	ldr	r2, [pc, #356]	; (8000858 <fsm_automatic_run+0x420>)
 80006f4:	6013      	str	r3, [r2, #0]
	        }
	        // Giảm thời gian xanh
	        if (red_time > 0) {
 80006f6:	4b59      	ldr	r3, [pc, #356]	; (800085c <fsm_automatic_run+0x424>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	dd14      	ble.n	8000728 <fsm_automatic_run+0x2f0>
	            display_lcd_r2(red_time);
 80006fe:	4b57      	ldr	r3, [pc, #348]	; (800085c <fsm_automatic_run+0x424>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe7e 	bl	8000404 <display_lcd_r2>
	            red_time--;
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <fsm_automatic_run+0x424>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a53      	ldr	r2, [pc, #332]	; (800085c <fsm_automatic_run+0x424>)
 8000710:	6013      	str	r3, [r2, #0]
	        // Chỉ chuyển trạng thái khi xanh hết time
	        if (green_time == 0) {
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <fsm_automatic_run+0x420>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d106      	bne.n	8000728 <fsm_automatic_run+0x2f0>
	        	green_time = GREEN_TIME;
 800071a:	4b51      	ldr	r3, [pc, #324]	; (8000860 <fsm_automatic_run+0x428>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a4e      	ldr	r2, [pc, #312]	; (8000858 <fsm_automatic_run+0x420>)
 8000720:	6013      	str	r3, [r2, #0]
	            status = YELLOW_RED;
 8000722:	4b50      	ldr	r3, [pc, #320]	; (8000864 <fsm_automatic_run+0x42c>)
 8000724:	2204      	movs	r2, #4
 8000726:	601a      	str	r2, [r3, #0]
	        }
	    }	        // Đặt lại bộ đếm
	     sch_counter = 1;
 8000728:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <fsm_automatic_run+0x41c>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
	}
		if(isButton1Pressed() == 1){
 800072e:	f7ff fd0d 	bl	800014c <isButton1Pressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	f040 8088 	bne.w	800084a <fsm_automatic_run+0x412>
			//clear_all_traffic_light();
			traffic_light_1_run(RED);
 800073a:	2017      	movs	r0, #23
 800073c:	f000 fd06 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000740:	2017      	movs	r0, #23
 8000742:	f000 fd47 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 8000746:	2017      	movs	r0, #23
 8000748:	f000 fd8c 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 800074c:	2017      	movs	r0, #23
 800074e:	f000 fdd5 	bl	80012fc <traffic_light_4_run>
		    //lcd_send_string("MODE 2:SET RED");
			lcd_init();
 8000752:	f000 fc59 	bl	8001008 <lcd_init>
			lcd_send_string("MODE 2:SET RED");
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <fsm_automatic_run+0x430>)
 8000758:	f000 fc84 	bl	8001064 <lcd_send_string>
			status = MODE_2;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <fsm_automatic_run+0x42c>)
 800075e:	220d      	movs	r2, #13
 8000760:	601a      	str	r2, [r3, #0]
			sch_counter = 2;
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <fsm_automatic_run+0x41c>)
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
		}
	    break;
 8000768:	e06f      	b.n	800084a <fsm_automatic_run+0x412>
	case YELLOW_RED:
	    if (sch_counter > 0) {
 800076a:	4b3a      	ldr	r3, [pc, #232]	; (8000854 <fsm_automatic_run+0x41c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd04      	ble.n	800077c <fsm_automatic_run+0x344>
	        sch_counter--;
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <fsm_automatic_run+0x41c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a36      	ldr	r2, [pc, #216]	; (8000854 <fsm_automatic_run+0x41c>)
 800077a:	6013      	str	r3, [r2, #0]
	    }
	    if (sch_counter == 0) {
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <fsm_automatic_run+0x41c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d13d      	bne.n	8000800 <fsm_automatic_run+0x3c8>
	        traffic_light_1_run(YELLOW);
 8000784:	2018      	movs	r0, #24
 8000786:	f000 fce1 	bl	800114c <traffic_light_1_run>
	        traffic_light_2_run(YELLOW);
 800078a:	2018      	movs	r0, #24
 800078c:	f000 fd22 	bl	80011d4 <traffic_light_2_run>
	        traffic_light_3_run(RED);
 8000790:	2017      	movs	r0, #23
 8000792:	f000 fd67 	bl	8001264 <traffic_light_3_run>
	        traffic_light_4_run(RED);
 8000796:	2017      	movs	r0, #23
 8000798:	f000 fdb0 	bl	80012fc <traffic_light_4_run>

	        // Giảm thời gian đỏ
	        if (yellow_time > 0) {
 800079c:	4b33      	ldr	r3, [pc, #204]	; (800086c <fsm_automatic_run+0x434>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd09      	ble.n	80007b8 <fsm_automatic_run+0x380>
	            display_lcd_r1(yellow_time);
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <fsm_automatic_run+0x434>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe11 	bl	80003d0 <display_lcd_r1>
	            yellow_time--;
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <fsm_automatic_run+0x434>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	4a2d      	ldr	r2, [pc, #180]	; (800086c <fsm_automatic_run+0x434>)
 80007b6:	6013      	str	r3, [r2, #0]
	        }
	        // Giảm thời gian xanh
	        if (red_time > 0) {
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <fsm_automatic_run+0x424>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd1c      	ble.n	80007fa <fsm_automatic_run+0x3c2>
	            display_lcd_r2(red_time);
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <fsm_automatic_run+0x424>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fe1d 	bl	8000404 <display_lcd_r2>
	            red_time--;
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <fsm_automatic_run+0x424>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <fsm_automatic_run+0x424>)
 80007d2:	6013      	str	r3, [r2, #0]
	        // Chỉ chuyển trạng thái khi xanh hết time
	        if (yellow_time == 0 && red_time == 0) {
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <fsm_automatic_run+0x434>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10e      	bne.n	80007fa <fsm_automatic_run+0x3c2>
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <fsm_automatic_run+0x424>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10a      	bne.n	80007fa <fsm_automatic_run+0x3c2>
	        	yellow_time = YELLOW_TIME;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <fsm_automatic_run+0x438>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <fsm_automatic_run+0x434>)
 80007ea:	6013      	str	r3, [r2, #0]
	        	red_time = RED_TIME;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <fsm_automatic_run+0x43c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <fsm_automatic_run+0x424>)
 80007f2:	6013      	str	r3, [r2, #0]
	            status = RED_GREEN;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <fsm_automatic_run+0x42c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
	        }
	    }	        // Đặt lại bộ đếm
	     sch_counter = 1;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <fsm_automatic_run+0x41c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
	}
		if(isButton1Pressed() == 1){
 8000800:	f7ff fca4 	bl	800014c <isButton1Pressed>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d121      	bne.n	800084e <fsm_automatic_run+0x416>
			//clear_all_traffic_light();
			traffic_light_1_run(RED);
 800080a:	2017      	movs	r0, #23
 800080c:	f000 fc9e 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000810:	2017      	movs	r0, #23
 8000812:	f000 fcdf 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 8000816:	2017      	movs	r0, #23
 8000818:	f000 fd24 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 800081c:	2017      	movs	r0, #23
 800081e:	f000 fd6d 	bl	80012fc <traffic_light_4_run>
		    //lcd_send_string("MODE 2:SET RED");
			lcd_init();
 8000822:	f000 fbf1 	bl	8001008 <lcd_init>
			lcd_send_string("MODE 2:SET RED");
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <fsm_automatic_run+0x430>)
 8000828:	f000 fc1c 	bl	8001064 <lcd_send_string>
			status = MODE_2;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <fsm_automatic_run+0x42c>)
 800082e:	220d      	movs	r2, #13
 8000830:	601a      	str	r2, [r3, #0]
			sch_counter = 2;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <fsm_automatic_run+0x41c>)
 8000834:	2202      	movs	r2, #2
 8000836:	601a      	str	r2, [r3, #0]
		}
	    break;
 8000838:	e009      	b.n	800084e <fsm_automatic_run+0x416>
		break;
 800083a:	bf00      	nop
 800083c:	e008      	b.n	8000850 <fsm_automatic_run+0x418>
		break;
 800083e:	bf00      	nop
 8000840:	e006      	b.n	8000850 <fsm_automatic_run+0x418>
	    break;
 8000842:	bf00      	nop
 8000844:	e004      	b.n	8000850 <fsm_automatic_run+0x418>
	    break;
 8000846:	bf00      	nop
 8000848:	e002      	b.n	8000850 <fsm_automatic_run+0x418>
	    break;
 800084a:	bf00      	nop
 800084c:	e000      	b.n	8000850 <fsm_automatic_run+0x418>
	    break;
 800084e:	bf00      	nop
  }
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000dc 	.word	0x200000dc
 8000858:	200000e8 	.word	0x200000e8
 800085c:	200000e0 	.word	0x200000e0
 8000860:	2000003c 	.word	0x2000003c
 8000864:	20000034 	.word	0x20000034
 8000868:	08006380 	.word	0x08006380
 800086c:	200000e4 	.word	0x200000e4
 8000870:	20000040 	.word	0x20000040
 8000874:	20000038 	.word	0x20000038

08000878 <fsm_edit_run>:
 *
 *  Created on: Dec 3, 2024
 *      Author: Admin
 */
#include "fsm_edit.h"
void fsm_edit_run(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	switch (status) {
 800087c:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <fsm_edit_run+0x1b0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b13      	cmp	r3, #19
 8000882:	f000 8089 	beq.w	8000998 <fsm_edit_run+0x120>
 8000886:	2b13      	cmp	r3, #19
 8000888:	f300 80cb 	bgt.w	8000a22 <fsm_edit_run+0x1aa>
 800088c:	2b11      	cmp	r3, #17
 800088e:	d002      	beq.n	8000896 <fsm_edit_run+0x1e>
 8000890:	2b12      	cmp	r3, #18
 8000892:	d041      	beq.n	8000918 <fsm_edit_run+0xa0>
		    lcd_init();
			sch_counter = 2;
		}
		break;
	}
}
 8000894:	e0c5      	b.n	8000a22 <fsm_edit_run+0x1aa>
		if(sch_counter > 0){
 8000896:	4b65      	ldr	r3, [pc, #404]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd04      	ble.n	80008a8 <fsm_edit_run+0x30>
			sch_counter --;
 800089e:	4b63      	ldr	r3, [pc, #396]	; (8000a2c <fsm_edit_run+0x1b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	4a61      	ldr	r2, [pc, #388]	; (8000a2c <fsm_edit_run+0x1b4>)
 80008a6:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 80008a8:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <fsm_edit_run+0x1b4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d106      	bne.n	80008be <fsm_edit_run+0x46>
			lcd_goto_XY(1, 0);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fbf2 	bl	800109c <lcd_goto_XY>
			lcd_send_string("TIME :    ");
 80008b8:	485d      	ldr	r0, [pc, #372]	; (8000a30 <fsm_edit_run+0x1b8>)
 80008ba:	f000 fbd3 	bl	8001064 <lcd_send_string>
		if (isButton2Pressed() == 1) {
 80008be:	f7ff fc57 	bl	8000170 <isButton2Pressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d118      	bne.n	80008fa <fsm_edit_run+0x82>
			if (RED_TIME < 7 || RED_TIME > 0) {
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	dd03      	ble.n	80008d8 <fsm_edit_run+0x60>
 80008d0:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd0b      	ble.n	80008f0 <fsm_edit_run+0x78>
				RED_TIME++;
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a55      	ldr	r2, [pc, #340]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008e0:	6013      	str	r3, [r2, #0]
				if (RED_TIME == 7) {
 80008e2:	4b54      	ldr	r3, [pc, #336]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d102      	bne.n	80008f0 <fsm_edit_run+0x78>
					RED_TIME = 1;
 80008ea:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
			display_lcd_r1(RED_TIME);
 80008f0:	4b50      	ldr	r3, [pc, #320]	; (8000a34 <fsm_edit_run+0x1bc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fd6b 	bl	80003d0 <display_lcd_r1>
		if (isButton3Pressed() == 1) {
 80008fa:	f7ff fc4b 	bl	8000194 <isButton3Pressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	f040 8089 	bne.w	8000a18 <fsm_edit_run+0x1a0>
			status = RED_SAVE;
 8000906:	4b48      	ldr	r3, [pc, #288]	; (8000a28 <fsm_edit_run+0x1b0>)
 8000908:	2214      	movs	r2, #20
 800090a:	601a      	str	r2, [r3, #0]
		    lcd_init();
 800090c:	f000 fb7c 	bl	8001008 <lcd_init>
			sch_counter = 2;
 8000910:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000912:	2202      	movs	r2, #2
 8000914:	601a      	str	r2, [r3, #0]
		break;
 8000916:	e07f      	b.n	8000a18 <fsm_edit_run+0x1a0>
		if(sch_counter > 0){
 8000918:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <fsm_edit_run+0x1b4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dd04      	ble.n	800092a <fsm_edit_run+0xb2>
			sch_counter --;
 8000920:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	4a41      	ldr	r2, [pc, #260]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000928:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 800092a:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <fsm_edit_run+0x1b4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d106      	bne.n	8000940 <fsm_edit_run+0xc8>
			lcd_goto_XY(1, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fbb1 	bl	800109c <lcd_goto_XY>
			lcd_send_string("TIME :     ");
 800093a:	483f      	ldr	r0, [pc, #252]	; (8000a38 <fsm_edit_run+0x1c0>)
 800093c:	f000 fb92 	bl	8001064 <lcd_send_string>
		if (isButton2Pressed() == 1) {
 8000940:	f7ff fc16 	bl	8000170 <isButton2Pressed>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d118      	bne.n	800097c <fsm_edit_run+0x104>
			if (GREEN_TIME < 7 || GREEN_TIME > 0) {
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <fsm_edit_run+0x1c4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b06      	cmp	r3, #6
 8000950:	dd03      	ble.n	800095a <fsm_edit_run+0xe2>
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <fsm_edit_run+0x1c4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dd0b      	ble.n	8000972 <fsm_edit_run+0xfa>
				GREEN_TIME++;
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <fsm_edit_run+0x1c4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <fsm_edit_run+0x1c4>)
 8000962:	6013      	str	r3, [r2, #0]
				if (GREEN_TIME == 7) {
 8000964:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <fsm_edit_run+0x1c4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d102      	bne.n	8000972 <fsm_edit_run+0xfa>
					GREEN_TIME = 1;
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <fsm_edit_run+0x1c4>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
			display_lcd_r1(GREEN_TIME);
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <fsm_edit_run+0x1c4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd2a 	bl	80003d0 <display_lcd_r1>
		if (isButton3Pressed() == 1) {
 800097c:	f7ff fc0a 	bl	8000194 <isButton3Pressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d14a      	bne.n	8000a1c <fsm_edit_run+0x1a4>
			status = GREEN_SAVE;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <fsm_edit_run+0x1b0>)
 8000988:	2215      	movs	r2, #21
 800098a:	601a      	str	r2, [r3, #0]
		    lcd_init();
 800098c:	f000 fb3c 	bl	8001008 <lcd_init>
			sch_counter = 2;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000992:	2202      	movs	r2, #2
 8000994:	601a      	str	r2, [r3, #0]
		break;
 8000996:	e041      	b.n	8000a1c <fsm_edit_run+0x1a4>
		if(sch_counter > 0){
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <fsm_edit_run+0x1b4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	dd04      	ble.n	80009aa <fsm_edit_run+0x132>
			sch_counter --;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <fsm_edit_run+0x1b4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <fsm_edit_run+0x1b4>)
 80009a8:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <fsm_edit_run+0x1b4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d106      	bne.n	80009c0 <fsm_edit_run+0x148>
			lcd_goto_XY(1, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 fb71 	bl	800109c <lcd_goto_XY>
			lcd_send_string("TIME :     ");
 80009ba:	481f      	ldr	r0, [pc, #124]	; (8000a38 <fsm_edit_run+0x1c0>)
 80009bc:	f000 fb52 	bl	8001064 <lcd_send_string>
		if (isButton2Pressed() == 1) {
 80009c0:	f7ff fbd6 	bl	8000170 <isButton2Pressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d118      	bne.n	80009fc <fsm_edit_run+0x184>
			if (YELLOW_TIME < 7 || YELLOW_TIME > 0) {
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	dd03      	ble.n	80009da <fsm_edit_run+0x162>
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dd0b      	ble.n	80009f2 <fsm_edit_run+0x17a>
				YELLOW_TIME++;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009e2:	6013      	str	r3, [r2, #0]
				if (YELLOW_TIME == 7) {
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d102      	bne.n	80009f2 <fsm_edit_run+0x17a>
					YELLOW_TIME = 1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
			display_lcd_r1(YELLOW_TIME);
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <fsm_edit_run+0x1c8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fcea 	bl	80003d0 <display_lcd_r1>
		if (isButton3Pressed() == 1) {
 80009fc:	f7ff fbca 	bl	8000194 <isButton3Pressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d10c      	bne.n	8000a20 <fsm_edit_run+0x1a8>
			status = YELLOW_SAVE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <fsm_edit_run+0x1b0>)
 8000a08:	2216      	movs	r2, #22
 8000a0a:	601a      	str	r2, [r3, #0]
		    lcd_init();
 8000a0c:	f000 fafc 	bl	8001008 <lcd_init>
			sch_counter = 2;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <fsm_edit_run+0x1b4>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	601a      	str	r2, [r3, #0]
		break;
 8000a16:	e003      	b.n	8000a20 <fsm_edit_run+0x1a8>
		break;
 8000a18:	bf00      	nop
 8000a1a:	e002      	b.n	8000a22 <fsm_edit_run+0x1aa>
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e000      	b.n	8000a22 <fsm_edit_run+0x1aa>
		break;
 8000a20:	bf00      	nop
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000034 	.word	0x20000034
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	08006390 	.word	0x08006390
 8000a34:	20000038 	.word	0x20000038
 8000a38:	0800639c 	.word	0x0800639c
 8000a3c:	2000003c 	.word	0x2000003c
 8000a40:	20000040 	.word	0x20000040

08000a44 <fsm_manual_run>:
 *
 *  Created on: Dec 3, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"
void fsm_manual_run(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	switch(status){
 8000a48:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <fsm_manual_run+0x218>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3b10      	subs	r3, #16
 8000a4e:	2b0d      	cmp	r3, #13
 8000a50:	f200 8101 	bhi.w	8000c56 <fsm_manual_run+0x212>
 8000a54:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <fsm_manual_run+0x18>)
 8000a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5a:	bf00      	nop
 8000a5c:	08000a95 	.word	0x08000a95
 8000a60:	08000c57 	.word	0x08000c57
 8000a64:	08000c57 	.word	0x08000c57
 8000a68:	08000c57 	.word	0x08000c57
 8000a6c:	08000c57 	.word	0x08000c57
 8000a70:	08000c57 	.word	0x08000c57
 8000a74:	08000c57 	.word	0x08000c57
 8000a78:	08000c57 	.word	0x08000c57
 8000a7c:	08000c57 	.word	0x08000c57
 8000a80:	08000c57 	.word	0x08000c57
 8000a84:	08000abf 	.word	0x08000abf
 8000a88:	08000b23 	.word	0x08000b23
 8000a8c:	08000b85 	.word	0x08000b85
 8000a90:	08000be7 	.word	0x08000be7
	case MODE_5:
	if(sch_counter > 0){
 8000a94:	4b72      	ldr	r3, [pc, #456]	; (8000c60 <fsm_manual_run+0x21c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dd04      	ble.n	8000aa6 <fsm_manual_run+0x62>
		sch_counter --;
 8000a9c:	4b70      	ldr	r3, [pc, #448]	; (8000c60 <fsm_manual_run+0x21c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a6f      	ldr	r2, [pc, #444]	; (8000c60 <fsm_manual_run+0x21c>)
 8000aa4:	6013      	str	r3, [r2, #0]
	}
	if (sch_counter == 0) {
 8000aa6:	4b6e      	ldr	r3, [pc, #440]	; (8000c60 <fsm_manual_run+0x21c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <fsm_manual_run+0x7a>
		status = RED_GREEN_MAN;
 8000aae:	4b6b      	ldr	r3, [pc, #428]	; (8000c5c <fsm_manual_run+0x218>)
 8000ab0:	221a      	movs	r2, #26
 8000ab2:	601a      	str	r2, [r3, #0]
		lcd_init();
 8000ab4:	f000 faa8 	bl	8001008 <lcd_init>
		lcd_send_string("RED_GREEN");
 8000ab8:	486a      	ldr	r0, [pc, #424]	; (8000c64 <fsm_manual_run+0x220>)
 8000aba:	f000 fad3 	bl	8001064 <lcd_send_string>
	}
	case RED_GREEN_MAN :
		if(isButton2Pressed() == 1){
 8000abe:	f7ff fb57 	bl	8000170 <isButton2Pressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10b      	bne.n	8000ae0 <fsm_manual_run+0x9c>
			traffic_light_1_run(RED);
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f000 fb3f 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000ace:	2017      	movs	r0, #23
 8000ad0:	f000 fb80 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(GREEN);
 8000ad4:	2019      	movs	r0, #25
 8000ad6:	f000 fbc5 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(GREEN);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 fc0e 	bl	80012fc <traffic_light_4_run>
		}
		if(isButton3Pressed() == 1){
 8000ae0:	f7ff fb58 	bl	8000194 <isButton3Pressed>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d107      	bne.n	8000afa <fsm_manual_run+0xb6>
			lcd_init();
 8000aea:	f000 fa8d 	bl	8001008 <lcd_init>
			lcd_send_string("RED_YELLOW");
 8000aee:	485e      	ldr	r0, [pc, #376]	; (8000c68 <fsm_manual_run+0x224>)
 8000af0:	f000 fab8 	bl	8001064 <lcd_send_string>
			status = RED_YELLOW_MAN;
 8000af4:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <fsm_manual_run+0x218>)
 8000af6:	221b      	movs	r2, #27
 8000af8:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1) {
 8000afa:	f7ff fb27 	bl	800014c <isButton1Pressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	f040 80a1 	bne.w	8000c48 <fsm_manual_run+0x204>
			status = MODE_1;
 8000b06:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <fsm_manual_run+0x218>)
 8000b08:	220c      	movs	r2, #12
 8000b0a:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000b0c:	f000 fa7c 	bl	8001008 <lcd_init>
			clear_all_traffic_light();
 8000b10:	f000 fae6 	bl	80010e0 <clear_all_traffic_light>
			lcd_send_string("MODE 1:AUTOMATIC");
 8000b14:	4855      	ldr	r0, [pc, #340]	; (8000c6c <fsm_manual_run+0x228>)
 8000b16:	f000 faa5 	bl	8001064 <lcd_send_string>
			sch_counter = 1;
 8000b1a:	4b51      	ldr	r3, [pc, #324]	; (8000c60 <fsm_manual_run+0x21c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b20:	e092      	b.n	8000c48 <fsm_manual_run+0x204>
	case RED_YELLOW_MAN :
		if(isButton2Pressed() == 1){
 8000b22:	f7ff fb25 	bl	8000170 <isButton2Pressed>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10b      	bne.n	8000b44 <fsm_manual_run+0x100>
			traffic_light_1_run(RED);
 8000b2c:	2017      	movs	r0, #23
 8000b2e:	f000 fb0d 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(RED);
 8000b32:	2017      	movs	r0, #23
 8000b34:	f000 fb4e 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(YELLOW);
 8000b38:	2018      	movs	r0, #24
 8000b3a:	f000 fb93 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(YELLOW);
 8000b3e:	2018      	movs	r0, #24
 8000b40:	f000 fbdc 	bl	80012fc <traffic_light_4_run>
		}
		if(isButton3Pressed() == 1){
 8000b44:	f7ff fb26 	bl	8000194 <isButton3Pressed>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d107      	bne.n	8000b5e <fsm_manual_run+0x11a>
			lcd_init();
 8000b4e:	f000 fa5b 	bl	8001008 <lcd_init>
			lcd_send_string("GREEN_RED");
 8000b52:	4847      	ldr	r0, [pc, #284]	; (8000c70 <fsm_manual_run+0x22c>)
 8000b54:	f000 fa86 	bl	8001064 <lcd_send_string>
			status = GREEN_RED_MAN;
 8000b58:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <fsm_manual_run+0x218>)
 8000b5a:	221c      	movs	r2, #28
 8000b5c:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1) {
 8000b5e:	f7ff faf5 	bl	800014c <isButton1Pressed>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d171      	bne.n	8000c4c <fsm_manual_run+0x208>
			status = MODE_1;
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <fsm_manual_run+0x218>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000b6e:	f000 fa4b 	bl	8001008 <lcd_init>
			clear_all_traffic_light();
 8000b72:	f000 fab5 	bl	80010e0 <clear_all_traffic_light>
			lcd_send_string("MODE 1:AUTOMATIC");
 8000b76:	483d      	ldr	r0, [pc, #244]	; (8000c6c <fsm_manual_run+0x228>)
 8000b78:	f000 fa74 	bl	8001064 <lcd_send_string>
			sch_counter = 1;
 8000b7c:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <fsm_manual_run+0x21c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b82:	e063      	b.n	8000c4c <fsm_manual_run+0x208>
	case GREEN_RED_MAN :
		if(isButton2Pressed() == 1){
 8000b84:	f7ff faf4 	bl	8000170 <isButton2Pressed>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10b      	bne.n	8000ba6 <fsm_manual_run+0x162>
			traffic_light_1_run(GREEN);
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 fadc 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(GREEN);
 8000b94:	2019      	movs	r0, #25
 8000b96:	f000 fb1d 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f000 fb62 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 8000ba0:	2017      	movs	r0, #23
 8000ba2:	f000 fbab 	bl	80012fc <traffic_light_4_run>
		}
		if(isButton3Pressed() == 1){
 8000ba6:	f7ff faf5 	bl	8000194 <isButton3Pressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d107      	bne.n	8000bc0 <fsm_manual_run+0x17c>
			lcd_init();
 8000bb0:	f000 fa2a 	bl	8001008 <lcd_init>
			lcd_send_string("YELLOW_RED");
 8000bb4:	482f      	ldr	r0, [pc, #188]	; (8000c74 <fsm_manual_run+0x230>)
 8000bb6:	f000 fa55 	bl	8001064 <lcd_send_string>
			status = YELLOW_RED_MAN;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <fsm_manual_run+0x218>)
 8000bbc:	221d      	movs	r2, #29
 8000bbe:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1) {
 8000bc0:	f7ff fac4 	bl	800014c <isButton1Pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d142      	bne.n	8000c50 <fsm_manual_run+0x20c>
			status = MODE_1;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <fsm_manual_run+0x218>)
 8000bcc:	220c      	movs	r2, #12
 8000bce:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000bd0:	f000 fa1a 	bl	8001008 <lcd_init>
			clear_all_traffic_light();
 8000bd4:	f000 fa84 	bl	80010e0 <clear_all_traffic_light>
			lcd_send_string("MODE 1:AUTOMATIC");
 8000bd8:	4824      	ldr	r0, [pc, #144]	; (8000c6c <fsm_manual_run+0x228>)
 8000bda:	f000 fa43 	bl	8001064 <lcd_send_string>
			sch_counter = 1;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <fsm_manual_run+0x21c>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
		}
		break;
 8000be4:	e034      	b.n	8000c50 <fsm_manual_run+0x20c>
	case YELLOW_RED_MAN :
		if(isButton2Pressed() == 1){
 8000be6:	f7ff fac3 	bl	8000170 <isButton2Pressed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10b      	bne.n	8000c08 <fsm_manual_run+0x1c4>
			traffic_light_1_run(YELLOW);
 8000bf0:	2018      	movs	r0, #24
 8000bf2:	f000 faab 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(YELLOW);
 8000bf6:	2018      	movs	r0, #24
 8000bf8:	f000 faec 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(RED);
 8000bfc:	2017      	movs	r0, #23
 8000bfe:	f000 fb31 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(RED);
 8000c02:	2017      	movs	r0, #23
 8000c04:	f000 fb7a 	bl	80012fc <traffic_light_4_run>
		}
		if(isButton3Pressed() == 1){
 8000c08:	f7ff fac4 	bl	8000194 <isButton3Pressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d107      	bne.n	8000c22 <fsm_manual_run+0x1de>
			lcd_init();
 8000c12:	f000 f9f9 	bl	8001008 <lcd_init>
			lcd_send_string("RED_GREEN");
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <fsm_manual_run+0x220>)
 8000c18:	f000 fa24 	bl	8001064 <lcd_send_string>
			status = RED_GREEN_MAN;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <fsm_manual_run+0x218>)
 8000c1e:	221a      	movs	r2, #26
 8000c20:	601a      	str	r2, [r3, #0]
		}
		if (isButton1Pressed() == 1) {
 8000c22:	f7ff fa93 	bl	800014c <isButton1Pressed>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d113      	bne.n	8000c54 <fsm_manual_run+0x210>
			status = MODE_1;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <fsm_manual_run+0x218>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000c32:	f000 f9e9 	bl	8001008 <lcd_init>
			clear_all_traffic_light();
 8000c36:	f000 fa53 	bl	80010e0 <clear_all_traffic_light>
			lcd_send_string("MODE 1:AUTOMATIC");
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <fsm_manual_run+0x228>)
 8000c3c:	f000 fa12 	bl	8001064 <lcd_send_string>
			sch_counter = 1;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <fsm_manual_run+0x21c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c46:	e005      	b.n	8000c54 <fsm_manual_run+0x210>
		break;
 8000c48:	bf00      	nop
 8000c4a:	e004      	b.n	8000c56 <fsm_manual_run+0x212>
		break;
 8000c4c:	bf00      	nop
 8000c4e:	e002      	b.n	8000c56 <fsm_manual_run+0x212>
		break;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <fsm_manual_run+0x212>
		break;
 8000c54:	bf00      	nop
	}

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000034 	.word	0x20000034
 8000c60:	200000dc 	.word	0x200000dc
 8000c64:	080063a8 	.word	0x080063a8
 8000c68:	080063b4 	.word	0x080063b4
 8000c6c:	080063c0 	.word	0x080063c0
 8000c70:	080063d4 	.word	0x080063d4
 8000c74:	080063e0 	.word	0x080063e0

08000c78 <fsm_save_value_run>:
 *
 *  Created on: Dec 3, 2024
 *      Author: Admin
 */
#include "fsm_save_value.h"
void fsm_save_value_run(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	switch (status) {
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <fsm_save_value_run+0xac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b16      	cmp	r3, #22
 8000c82:	d032      	beq.n	8000cea <fsm_save_value_run+0x72>
 8000c84:	2b16      	cmp	r3, #22
 8000c86:	dc4b      	bgt.n	8000d20 <fsm_save_value_run+0xa8>
 8000c88:	2b14      	cmp	r3, #20
 8000c8a:	d002      	beq.n	8000c92 <fsm_save_value_run+0x1a>
 8000c8c:	2b15      	cmp	r3, #21
 8000c8e:	d016      	beq.n	8000cbe <fsm_save_value_run+0x46>
			lcd_send_string("SAVED !");
			status = INIT;
		}
		break;
	}
}
 8000c90:	e046      	b.n	8000d20 <fsm_save_value_run+0xa8>
		if(sch_counter > 0){
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dd04      	ble.n	8000ca4 <fsm_save_value_run+0x2c>
			sch_counter --;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000ca2:	6013      	str	r3, [r2, #0]
		clear_all_traffic_light();
 8000ca4:	f000 fa1c 	bl	80010e0 <clear_all_traffic_light>
		if (sch_counter == 0) {
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d132      	bne.n	8000d16 <fsm_save_value_run+0x9e>
			lcd_send_string("SAVED !");
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <fsm_save_value_run+0xb4>)
 8000cb2:	f000 f9d7 	bl	8001064 <lcd_send_string>
			status = INIT;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <fsm_save_value_run+0xac>)
 8000cb8:	220b      	movs	r2, #11
 8000cba:	601a      	str	r2, [r3, #0]
		break;
 8000cbc:	e02b      	b.n	8000d16 <fsm_save_value_run+0x9e>
		if(sch_counter > 0){
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dd04      	ble.n	8000cd0 <fsm_save_value_run+0x58>
			sch_counter --;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cce:	6013      	str	r3, [r2, #0]
		clear_all_traffic_light();
 8000cd0:	f000 fa06 	bl	80010e0 <clear_all_traffic_light>
		if (sch_counter == 0) {
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d11e      	bne.n	8000d1a <fsm_save_value_run+0xa2>
			lcd_send_string("SAVED !");
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <fsm_save_value_run+0xb4>)
 8000cde:	f000 f9c1 	bl	8001064 <lcd_send_string>
			status = INIT;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <fsm_save_value_run+0xac>)
 8000ce4:	220b      	movs	r2, #11
 8000ce6:	601a      	str	r2, [r3, #0]
		break;
 8000ce8:	e017      	b.n	8000d1a <fsm_save_value_run+0xa2>
		if(sch_counter > 0){
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dd04      	ble.n	8000cfc <fsm_save_value_run+0x84>
			sch_counter --;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000cfa:	6013      	str	r3, [r2, #0]
		clear_all_traffic_light();
 8000cfc:	f000 f9f0 	bl	80010e0 <clear_all_traffic_light>
		if (sch_counter == 0) {
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <fsm_save_value_run+0xb0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10a      	bne.n	8000d1e <fsm_save_value_run+0xa6>
			lcd_send_string("SAVED !");
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <fsm_save_value_run+0xb4>)
 8000d0a:	f000 f9ab 	bl	8001064 <lcd_send_string>
			status = INIT;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <fsm_save_value_run+0xac>)
 8000d10:	220b      	movs	r2, #11
 8000d12:	601a      	str	r2, [r3, #0]
		break;
 8000d14:	e003      	b.n	8000d1e <fsm_save_value_run+0xa6>
		break;
 8000d16:	bf00      	nop
 8000d18:	e002      	b.n	8000d20 <fsm_save_value_run+0xa8>
		break;
 8000d1a:	bf00      	nop
 8000d1c:	e000      	b.n	8000d20 <fsm_save_value_run+0xa8>
		break;
 8000d1e:	bf00      	nop
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000034 	.word	0x20000034
 8000d28:	200000dc 	.word	0x200000dc
 8000d2c:	080063ec 	.word	0x080063ec

08000d30 <fsm_setting_run>:
 *  Created on: Dec 3, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"

void fsm_setting_run(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	switch(status){
 8000d34:	4b71      	ldr	r3, [pc, #452]	; (8000efc <fsm_setting_run+0x1cc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	f000 8099 	beq.w	8000e70 <fsm_setting_run+0x140>
 8000d3e:	2b0f      	cmp	r3, #15
 8000d40:	f300 80d9 	bgt.w	8000ef6 <fsm_setting_run+0x1c6>
 8000d44:	2b0d      	cmp	r3, #13
 8000d46:	d002      	beq.n	8000d4e <fsm_setting_run+0x1e>
 8000d48:	2b0e      	cmp	r3, #14
 8000d4a:	d049      	beq.n	8000de0 <fsm_setting_run+0xb0>
			lcd_send_string("EDIT:YELLOW");
			sch_counter = 2;
		}
	break;
	}
}
 8000d4c:	e0d3      	b.n	8000ef6 <fsm_setting_run+0x1c6>
		if(sch_counter > 0){
 8000d4e:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	dd04      	ble.n	8000d60 <fsm_setting_run+0x30>
			sch_counter --;
 8000d56:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a68      	ldr	r2, [pc, #416]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000d5e:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 8000d60:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10d      	bne.n	8000d84 <fsm_setting_run+0x54>
			lcd_goto_XY(1, 0);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f996 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Next_mode : B1");
 8000d70:	4864      	ldr	r0, [pc, #400]	; (8000f04 <fsm_setting_run+0x1d4>)
 8000d72:	f000 f977 	bl	8001064 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000d76:	2100      	movs	r1, #0
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f000 f98f 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Edit red : B2");
 8000d7e:	4862      	ldr	r0, [pc, #392]	; (8000f08 <fsm_setting_run+0x1d8>)
 8000d80:	f000 f970 	bl	8001064 <lcd_send_string>
		if (isButton1Pressed() == 1) {
 8000d84:	f7ff f9e2 	bl	800014c <isButton1Pressed>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d116      	bne.n	8000dbc <fsm_setting_run+0x8c>
			status = MODE_3;
 8000d8e:	4b5b      	ldr	r3, [pc, #364]	; (8000efc <fsm_setting_run+0x1cc>)
 8000d90:	220e      	movs	r2, #14
 8000d92:	601a      	str	r2, [r3, #0]
			traffic_light_1_run(GREEN);
 8000d94:	2019      	movs	r0, #25
 8000d96:	f000 f9d9 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(GREEN);
 8000d9a:	2019      	movs	r0, #25
 8000d9c:	f000 fa1a 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(GREEN);
 8000da0:	2019      	movs	r0, #25
 8000da2:	f000 fa5f 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(GREEN);
 8000da6:	2019      	movs	r0, #25
 8000da8:	f000 faa8 	bl	80012fc <traffic_light_4_run>
			lcd_init();
 8000dac:	f000 f92c 	bl	8001008 <lcd_init>
			lcd_send_string("MODE 3:SET GREEN");
 8000db0:	4856      	ldr	r0, [pc, #344]	; (8000f0c <fsm_setting_run+0x1dc>)
 8000db2:	f000 f957 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000db6:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000dbc:	f7ff f9d8 	bl	8000170 <isButton2Pressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	f040 8092 	bne.w	8000eec <fsm_setting_run+0x1bc>
			status = RED_EDIT;
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <fsm_setting_run+0x1cc>)
 8000dca:	2211      	movs	r2, #17
 8000dcc:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000dce:	f000 f91b 	bl	8001008 <lcd_init>
			lcd_send_string("EDIT:RED");
 8000dd2:	484f      	ldr	r0, [pc, #316]	; (8000f10 <fsm_setting_run+0x1e0>)
 8000dd4:	f000 f946 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
		break;
 8000dde:	e085      	b.n	8000eec <fsm_setting_run+0x1bc>
		if(sch_counter > 0){
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd04      	ble.n	8000df2 <fsm_setting_run+0xc2>
			sch_counter --;
 8000de8:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a44      	ldr	r2, [pc, #272]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000df0:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <fsm_setting_run+0xe6>
			lcd_goto_XY(1, 0);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 f94d 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Next_mode : B1  ");
 8000e02:	4844      	ldr	r0, [pc, #272]	; (8000f14 <fsm_setting_run+0x1e4>)
 8000e04:	f000 f92e 	bl	8001064 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f000 f946 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Edit green : B2");
 8000e10:	4841      	ldr	r0, [pc, #260]	; (8000f18 <fsm_setting_run+0x1e8>)
 8000e12:	f000 f927 	bl	8001064 <lcd_send_string>
		if (isButton1Pressed() == 1) {
 8000e16:	f7ff f999 	bl	800014c <isButton1Pressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d116      	bne.n	8000e4e <fsm_setting_run+0x11e>
			status = MODE_4;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <fsm_setting_run+0x1cc>)
 8000e22:	220f      	movs	r2, #15
 8000e24:	601a      	str	r2, [r3, #0]
			traffic_light_1_run(YELLOW);
 8000e26:	2018      	movs	r0, #24
 8000e28:	f000 f990 	bl	800114c <traffic_light_1_run>
			traffic_light_2_run(YELLOW);
 8000e2c:	2018      	movs	r0, #24
 8000e2e:	f000 f9d1 	bl	80011d4 <traffic_light_2_run>
			traffic_light_3_run(YELLOW);
 8000e32:	2018      	movs	r0, #24
 8000e34:	f000 fa16 	bl	8001264 <traffic_light_3_run>
			traffic_light_4_run(YELLOW);
 8000e38:	2018      	movs	r0, #24
 8000e3a:	f000 fa5f 	bl	80012fc <traffic_light_4_run>
			lcd_init();
 8000e3e:	f000 f8e3 	bl	8001008 <lcd_init>
			lcd_send_string("MODE4:SET YELLOW");
 8000e42:	4836      	ldr	r0, [pc, #216]	; (8000f1c <fsm_setting_run+0x1ec>)
 8000e44:	f000 f90e 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000e4e:	f7ff f98f 	bl	8000170 <isButton2Pressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d14b      	bne.n	8000ef0 <fsm_setting_run+0x1c0>
			status = GREEN_EDIT;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <fsm_setting_run+0x1cc>)
 8000e5a:	2212      	movs	r2, #18
 8000e5c:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000e5e:	f000 f8d3 	bl	8001008 <lcd_init>
			lcd_send_string("EDIT:GREEN");
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <fsm_setting_run+0x1f0>)
 8000e64:	f000 f8fe 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
		break;
 8000e6e:	e03f      	b.n	8000ef0 <fsm_setting_run+0x1c0>
		if(sch_counter > 0){
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dd04      	ble.n	8000e82 <fsm_setting_run+0x152>
			sch_counter --;
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e80:	6013      	str	r3, [r2, #0]
		if (sch_counter == 0) {
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <fsm_setting_run+0x176>
			lcd_goto_XY(1, 0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 f905 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Next_mode : B1  ");
 8000e92:	4820      	ldr	r0, [pc, #128]	; (8000f14 <fsm_setting_run+0x1e4>)
 8000e94:	f000 f8e6 	bl	8001064 <lcd_send_string>
			lcd_goto_XY(2, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 f8fe 	bl	800109c <lcd_goto_XY>
			lcd_send_string("Edit yellow : B2");
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <fsm_setting_run+0x1f4>)
 8000ea2:	f000 f8df 	bl	8001064 <lcd_send_string>
		if (isButton1Pressed() == 1) {
 8000ea6:	f7ff f951 	bl	800014c <isButton1Pressed>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10c      	bne.n	8000eca <fsm_setting_run+0x19a>
			status = MODE_5;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <fsm_setting_run+0x1cc>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000eb6:	f000 f8a7 	bl	8001008 <lcd_init>
			clear_all_traffic_light();
 8000eba:	f000 f911 	bl	80010e0 <clear_all_traffic_light>
			lcd_send_string("MODE 5:MANUAL");
 8000ebe:	481a      	ldr	r0, [pc, #104]	; (8000f28 <fsm_setting_run+0x1f8>)
 8000ec0:	f000 f8d0 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	601a      	str	r2, [r3, #0]
		if (isButton2Pressed() == 1) {
 8000eca:	f7ff f951 	bl	8000170 <isButton2Pressed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10f      	bne.n	8000ef4 <fsm_setting_run+0x1c4>
			status = YELLOW_EDIT;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <fsm_setting_run+0x1cc>)
 8000ed6:	2213      	movs	r2, #19
 8000ed8:	601a      	str	r2, [r3, #0]
			lcd_init();
 8000eda:	f000 f895 	bl	8001008 <lcd_init>
			lcd_send_string("EDIT:YELLOW");
 8000ede:	4813      	ldr	r0, [pc, #76]	; (8000f2c <fsm_setting_run+0x1fc>)
 8000ee0:	f000 f8c0 	bl	8001064 <lcd_send_string>
			sch_counter = 2;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <fsm_setting_run+0x1d0>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	601a      	str	r2, [r3, #0]
	break;
 8000eea:	e003      	b.n	8000ef4 <fsm_setting_run+0x1c4>
		break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <fsm_setting_run+0x1c6>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <fsm_setting_run+0x1c6>
	break;
 8000ef4:	bf00      	nop
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000034 	.word	0x20000034
 8000f00:	200000dc 	.word	0x200000dc
 8000f04:	080063f4 	.word	0x080063f4
 8000f08:	08006404 	.word	0x08006404
 8000f0c:	08006414 	.word	0x08006414
 8000f10:	08006428 	.word	0x08006428
 8000f14:	08006434 	.word	0x08006434
 8000f18:	08006448 	.word	0x08006448
 8000f1c:	08006458 	.word	0x08006458
 8000f20:	0800646c 	.word	0x0800646c
 8000f24:	08006478 	.word	0x08006478
 8000f28:	0800648c 	.word	0x0800648c
 8000f2c:	0800649c 	.word	0x0800649c

08000f30 <blinky_led>:
int yellow_time = 0;
int green_time = 0;
int RED_TIME = 5;
int GREEN_TIME = 3;
int YELLOW_TIME = 2;
void blinky_led(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <blinky_led+0x14>)
 8000f3a:	f001 facc 	bl	80024d6 <HAL_GPIO_TogglePin>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40011000 	.word	0x40011000

08000f48 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f023 030f 	bic.w	r3, r3, #15
 8000f58:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 030c 	orr.w	r3, r3, #12
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	f043 030c 	orr.w	r3, r3, #12
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f88:	f107 0208 	add.w	r2, r7, #8
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2304      	movs	r3, #4
 8000f92:	2142      	movs	r1, #66	; 0x42
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <lcd_send_cmd+0x5c>)
 8000f96:	f001 fc31 	bl	80027fc <HAL_I2C_Master_Transmit>
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000fc 	.word	0x200000fc

08000fa8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f023 030f 	bic.w	r3, r3, #15
 8000fb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 030d 	orr.w	r3, r3, #13
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f043 0309 	orr.w	r3, r3, #9
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f043 030d 	orr.w	r3, r3, #13
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	f043 0309 	orr.w	r3, r3, #9
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	2142      	movs	r1, #66	; 0x42
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <lcd_send_data+0x5c>)
 8000ff6:	f001 fc01 	bl	80027fc <HAL_I2C_Master_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000fc 	.word	0x200000fc

08001008 <lcd_init>:

void lcd_init (void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800100c:	2033      	movs	r0, #51	; 0x33
 800100e:	f7ff ff9b 	bl	8000f48 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f7ff ff98 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 8001018:	2032      	movs	r0, #50	; 0x32
 800101a:	f000 fef1 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800101e:	2028      	movs	r0, #40	; 0x28
 8001020:	f7ff ff92 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f000 feeb 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ff8c 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	; 0x32
 8001032:	f000 fee5 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001036:	2006      	movs	r0, #6
 8001038:	f7ff ff86 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f000 fedf 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001042:	200c      	movs	r0, #12
 8001044:	f7ff ff80 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 8001048:	2032      	movs	r0, #50	; 0x32
 800104a:	f000 fed9 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800104e:	2002      	movs	r0, #2
 8001050:	f7ff ff7a 	bl	8000f48 <lcd_send_cmd>
	HAL_Delay(50);
 8001054:	2032      	movs	r0, #50	; 0x32
 8001056:	f000 fed3 	bl	8001e00 <HAL_Delay>
	lcd_send_cmd (0x80);
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff ff74 	bl	8000f48 <lcd_send_cmd>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800106c:	e006      	b.n	800107c <lcd_send_string+0x18>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff96 	bl	8000fa8 <lcd_send_data>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f4      	bne.n	800106e <lcd_send_string+0xa>
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff ff58 	bl	8000f48 <lcd_send_cmd>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	337f      	adds	r3, #127	; 0x7f
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e008      	b.n	80010d0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3340      	adds	r3, #64	; 0x40
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff38 	bl	8000f48 <lcd_send_cmd>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <clear_all_traffic_light>:
 *  Created on: Dec 3, 2024
 *      Author: Admin
 */
#include "light_traffic.h"
#include "global.h"
void clear_all_traffic_light(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	   HAL_GPIO_WritePin(traffic_light_1_0_GPIO_Port, traffic_light_1_0_Pin, RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <clear_all_traffic_light+0x60>)
 80010ea:	f001 f9dc 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_1_1_GPIO_Port, traffic_light_1_1_Pin, RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	4813      	ldr	r0, [pc, #76]	; (8001140 <clear_all_traffic_light+0x60>)
 80010f4:	f001 f9d7 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_0_GPIO_Port, traffic_light_2_0_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <clear_all_traffic_light+0x60>)
 8001100:	f001 f9d1 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_1_GPIO_Port, traffic_light_2_1_Pin, RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2110      	movs	r1, #16
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <clear_all_traffic_light+0x60>)
 800110a:	f001 f9cc 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_0_GPIO_Port, traffic_light_3_0_Pin, RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <clear_all_traffic_light+0x64>)
 8001116:	f001 f9c6 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_1_GPIO_Port, traffic_light_3_1_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <clear_all_traffic_light+0x64>)
 8001122:	f001 f9c0 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_0_GPIO_Port, traffic_light_4_0_Pin, RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2140      	movs	r1, #64	; 0x40
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <clear_all_traffic_light+0x60>)
 800112c:	f001 f9bb 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_1_GPIO_Port, traffic_light_4_1_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <clear_all_traffic_light+0x68>)
 8001136:	f001 f9b6 	bl	80024a6 <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010c00 	.word	0x40010c00
 8001144:	40010800 	.word	0x40010800
 8001148:	40011000 	.word	0x40011000

0800114c <traffic_light_1_run>:
void traffic_light_1_run(int color){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b19      	cmp	r3, #25
 8001158:	d01f      	beq.n	800119a <traffic_light_1_run+0x4e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b19      	cmp	r3, #25
 800115e:	dc27      	bgt.n	80011b0 <traffic_light_1_run+0x64>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b17      	cmp	r3, #23
 8001164:	d003      	beq.n	800116e <traffic_light_1_run+0x22>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b18      	cmp	r3, #24
 800116a:	d00b      	beq.n	8001184 <traffic_light_1_run+0x38>
 800116c:	e020      	b.n	80011b0 <traffic_light_1_run+0x64>
	case RED:
	   HAL_GPIO_WritePin(traffic_light_1_0_GPIO_Port, traffic_light_1_0_Pin, SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2120      	movs	r1, #32
 8001172:	4817      	ldr	r0, [pc, #92]	; (80011d0 <traffic_light_1_run+0x84>)
 8001174:	f001 f997 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_1_1_GPIO_Port, traffic_light_1_1_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <traffic_light_1_run+0x84>)
 800117e:	f001 f992 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 8001182:	e020      	b.n	80011c6 <traffic_light_1_run+0x7a>
	case YELLOW:
	   HAL_GPIO_WritePin(traffic_light_1_0_GPIO_Port, traffic_light_1_0_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <traffic_light_1_run+0x84>)
 800118a:	f001 f98c 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_1_1_GPIO_Port, traffic_light_1_1_Pin, RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2108      	movs	r1, #8
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <traffic_light_1_run+0x84>)
 8001194:	f001 f987 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 8001198:	e015      	b.n	80011c6 <traffic_light_1_run+0x7a>
	case GREEN:
	   HAL_GPIO_WritePin(traffic_light_1_0_GPIO_Port, traffic_light_1_0_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2120      	movs	r1, #32
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <traffic_light_1_run+0x84>)
 80011a0:	f001 f981 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_1_1_GPIO_Port, traffic_light_1_1_Pin, SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2108      	movs	r1, #8
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <traffic_light_1_run+0x84>)
 80011aa:	f001 f97c 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 80011ae:	e00a      	b.n	80011c6 <traffic_light_1_run+0x7a>
	default :
	   HAL_GPIO_WritePin(traffic_light_1_0_GPIO_Port, traffic_light_1_0_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <traffic_light_1_run+0x84>)
 80011b6:	f001 f976 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_1_1_GPIO_Port, traffic_light_1_1_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2108      	movs	r1, #8
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <traffic_light_1_run+0x84>)
 80011c0:	f001 f971 	bl	80024a6 <HAL_GPIO_WritePin>
	   break;
 80011c4:	bf00      	nop
	}
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <traffic_light_2_run>:
void traffic_light_2_run(int color){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	switch (color) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b19      	cmp	r3, #25
 80011e0:	d021      	beq.n	8001226 <traffic_light_2_run+0x52>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b19      	cmp	r3, #25
 80011e6:	dc2a      	bgt.n	800123e <traffic_light_2_run+0x6a>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b17      	cmp	r3, #23
 80011ec:	d003      	beq.n	80011f6 <traffic_light_2_run+0x22>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b18      	cmp	r3, #24
 80011f2:	d00c      	beq.n	800120e <traffic_light_2_run+0x3a>
 80011f4:	e023      	b.n	800123e <traffic_light_2_run+0x6a>
	case RED:
	   HAL_GPIO_WritePin(traffic_light_2_0_GPIO_Port, traffic_light_2_0_Pin, SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <traffic_light_2_run+0x8c>)
 80011fe:	f001 f952 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_1_GPIO_Port, traffic_light_2_1_Pin, SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2110      	movs	r1, #16
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <traffic_light_2_run+0x8c>)
 8001208:	f001 f94d 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 800120c:	e023      	b.n	8001256 <traffic_light_2_run+0x82>
	case YELLOW:
	   HAL_GPIO_WritePin(traffic_light_2_0_GPIO_Port, traffic_light_2_0_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <traffic_light_2_run+0x8c>)
 8001216:	f001 f946 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_1_GPIO_Port, traffic_light_2_1_Pin, RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2110      	movs	r1, #16
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <traffic_light_2_run+0x8c>)
 8001220:	f001 f941 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 8001224:	e017      	b.n	8001256 <traffic_light_2_run+0x82>
	case GREEN:
	   HAL_GPIO_WritePin(traffic_light_2_0_GPIO_Port, traffic_light_2_0_Pin, RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <traffic_light_2_run+0x8c>)
 800122e:	f001 f93a 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_1_GPIO_Port, traffic_light_2_1_Pin, SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2110      	movs	r1, #16
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <traffic_light_2_run+0x8c>)
 8001238:	f001 f935 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 800123c:	e00b      	b.n	8001256 <traffic_light_2_run+0x82>
	default :
	   HAL_GPIO_WritePin(traffic_light_2_0_GPIO_Port, traffic_light_2_0_Pin, RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <traffic_light_2_run+0x8c>)
 8001246:	f001 f92e 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_2_1_GPIO_Port, traffic_light_2_1_Pin, RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <traffic_light_2_run+0x8c>)
 8001250:	f001 f929 	bl	80024a6 <HAL_GPIO_WritePin>
	   break;
 8001254:	bf00      	nop
	}
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010c00 	.word	0x40010c00

08001264 <traffic_light_3_run>:
void traffic_light_3_run(int color){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b19      	cmp	r3, #25
 8001270:	d023      	beq.n	80012ba <traffic_light_3_run+0x56>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b19      	cmp	r3, #25
 8001276:	dc2d      	bgt.n	80012d4 <traffic_light_3_run+0x70>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b17      	cmp	r3, #23
 800127c:	d003      	beq.n	8001286 <traffic_light_3_run+0x22>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b18      	cmp	r3, #24
 8001282:	d00d      	beq.n	80012a0 <traffic_light_3_run+0x3c>
 8001284:	e026      	b.n	80012d4 <traffic_light_3_run+0x70>
	case RED:
	   HAL_GPIO_WritePin(traffic_light_3_0_GPIO_Port, traffic_light_3_0_Pin, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128c:	481a      	ldr	r0, [pc, #104]	; (80012f8 <traffic_light_3_run+0x94>)
 800128e:	f001 f90a 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_1_GPIO_Port, traffic_light_3_1_Pin, SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	4817      	ldr	r0, [pc, #92]	; (80012f8 <traffic_light_3_run+0x94>)
 800129a:	f001 f904 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 800129e:	e026      	b.n	80012ee <traffic_light_3_run+0x8a>
	case YELLOW:
	   HAL_GPIO_WritePin(traffic_light_3_0_GPIO_Port, traffic_light_3_0_Pin, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <traffic_light_3_run+0x94>)
 80012a8:	f001 f8fd 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_1_GPIO_Port, traffic_light_3_1_Pin, RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4811      	ldr	r0, [pc, #68]	; (80012f8 <traffic_light_3_run+0x94>)
 80012b4:	f001 f8f7 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 80012b8:	e019      	b.n	80012ee <traffic_light_3_run+0x8a>
	case GREEN:
	   HAL_GPIO_WritePin(traffic_light_3_0_GPIO_Port, traffic_light_3_0_Pin, RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <traffic_light_3_run+0x94>)
 80012c2:	f001 f8f0 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_1_GPIO_Port, traffic_light_3_1_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <traffic_light_3_run+0x94>)
 80012ce:	f001 f8ea 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 80012d2:	e00c      	b.n	80012ee <traffic_light_3_run+0x8a>
	default :
	   HAL_GPIO_WritePin(traffic_light_3_0_GPIO_Port, traffic_light_3_0_Pin, RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <traffic_light_3_run+0x94>)
 80012dc:	f001 f8e3 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_3_1_GPIO_Port, traffic_light_3_1_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <traffic_light_3_run+0x94>)
 80012e8:	f001 f8dd 	bl	80024a6 <HAL_GPIO_WritePin>
	   break;
 80012ec:	bf00      	nop
	}
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010800 	.word	0x40010800

080012fc <traffic_light_4_run>:
void traffic_light_4_run(int color){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b19      	cmp	r3, #25
 8001308:	d01f      	beq.n	800134a <traffic_light_4_run+0x4e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b19      	cmp	r3, #25
 800130e:	dc27      	bgt.n	8001360 <traffic_light_4_run+0x64>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b17      	cmp	r3, #23
 8001314:	d003      	beq.n	800131e <traffic_light_4_run+0x22>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b18      	cmp	r3, #24
 800131a:	d00b      	beq.n	8001334 <traffic_light_4_run+0x38>
 800131c:	e020      	b.n	8001360 <traffic_light_4_run+0x64>
	case RED:
	   HAL_GPIO_WritePin(traffic_light_4_0_GPIO_Port, traffic_light_4_0_Pin, SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <traffic_light_4_run+0x84>)
 8001324:	f001 f8bf 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_1_GPIO_Port, traffic_light_4_1_Pin, SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <traffic_light_4_run+0x88>)
 800132e:	f001 f8ba 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 8001332:	e020      	b.n	8001376 <traffic_light_4_run+0x7a>
	case YELLOW:
	   HAL_GPIO_WritePin(traffic_light_4_0_GPIO_Port, traffic_light_4_0_Pin, SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4811      	ldr	r0, [pc, #68]	; (8001380 <traffic_light_4_run+0x84>)
 800133a:	f001 f8b4 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_1_GPIO_Port, traffic_light_4_1_Pin, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <traffic_light_4_run+0x88>)
 8001344:	f001 f8af 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 8001348:	e015      	b.n	8001376 <traffic_light_4_run+0x7a>
	case GREEN:
	   HAL_GPIO_WritePin(traffic_light_4_0_GPIO_Port, traffic_light_4_0_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <traffic_light_4_run+0x84>)
 8001350:	f001 f8a9 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_1_GPIO_Port, traffic_light_4_1_Pin, SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <traffic_light_4_run+0x88>)
 800135a:	f001 f8a4 	bl	80024a6 <HAL_GPIO_WritePin>
		break;
 800135e:	e00a      	b.n	8001376 <traffic_light_4_run+0x7a>
	default :
	   HAL_GPIO_WritePin(traffic_light_4_0_GPIO_Port, traffic_light_4_0_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <traffic_light_4_run+0x84>)
 8001366:	f001 f89e 	bl	80024a6 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(traffic_light_4_1_GPIO_Port, traffic_light_4_1_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <traffic_light_4_run+0x88>)
 8001370:	f001 f899 	bl	80024a6 <HAL_GPIO_WritePin>
	   break;
 8001374:	bf00      	nop
	}
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40011000 	.word	0x40011000

08001388 <init_traffic_light_time>:

void init_traffic_light_time(int red,int yellow, int green){
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	red_time = red;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <init_traffic_light_time+0x28>)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6013      	str	r3, [r2, #0]
	yellow_time = yellow;
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <init_traffic_light_time+0x2c>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	6013      	str	r3, [r2, #0]
	green_time = green;
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <init_traffic_light_time+0x30>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]

}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200000e0 	.word	0x200000e0
 80013b4:	200000e4 	.word	0x200000e4
 80013b8:	200000e8 	.word	0x200000e8

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 fcbc 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f83e 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 f922 	bl	8001610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013cc:	f000 f8f6 	bl	80015bc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013d0:	f000 f8a8 	bl	8001524 <MX_TIM2_Init>
  MX_I2C1_Init();
 80013d4:	f000 f878 	bl	80014c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <main+0x6c>)
 80013da:	f003 febf 	bl	800515c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// Khởi tạo LCD
   lcd_init();
 80013de:	f7ff fe13 	bl	8001008 <lcd_init>
   lcd_clear_display();  // Xóa màn hình LCD
 80013e2:	f7ff fe54 	bl	800108e <lcd_clear_display>
   // Hiển thị thông tin lên LCD


   SCH_Add_Task(blinky_led, 100, 100);
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	2164      	movs	r1, #100	; 0x64
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <main+0x70>)
 80013ec:	f000 f9fc 	bl	80017e8 <SCH_Add_Task>
   SCH_Add_Task(fsm_automatic_run, 100, 100);
 80013f0:	2264      	movs	r2, #100	; 0x64
 80013f2:	2164      	movs	r1, #100	; 0x64
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <main+0x74>)
 80013f6:	f000 f9f7 	bl	80017e8 <SCH_Add_Task>
   SCH_Add_Task(fsm_edit_run, 100, 100);
 80013fa:	2264      	movs	r2, #100	; 0x64
 80013fc:	2164      	movs	r1, #100	; 0x64
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x78>)
 8001400:	f000 f9f2 	bl	80017e8 <SCH_Add_Task>
   SCH_Add_Task(fsm_manual_run, 100, 100);
 8001404:	2264      	movs	r2, #100	; 0x64
 8001406:	2164      	movs	r1, #100	; 0x64
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <main+0x7c>)
 800140a:	f000 f9ed 	bl	80017e8 <SCH_Add_Task>
   SCH_Add_Task(fsm_save_value_run, 100, 100);
 800140e:	2264      	movs	r2, #100	; 0x64
 8001410:	2164      	movs	r1, #100	; 0x64
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <main+0x80>)
 8001414:	f000 f9e8 	bl	80017e8 <SCH_Add_Task>
   SCH_Add_Task(fsm_setting_run, 100, 100);
 8001418:	2264      	movs	r2, #100	; 0x64
 800141a:	2164      	movs	r1, #100	; 0x64
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <main+0x84>)
 800141e:	f000 f9e3 	bl	80017e8 <SCH_Add_Task>


  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001422:	f000 fa97 	bl	8001954 <SCH_Dispatch_Tasks>
 8001426:	e7fc      	b.n	8001422 <main+0x66>
 8001428:	20000150 	.word	0x20000150
 800142c:	08000f31 	.word	0x08000f31
 8001430:	08000439 	.word	0x08000439
 8001434:	08000879 	.word	0x08000879
 8001438:	08000a45 	.word	0x08000a45
 800143c:	08000c79 	.word	0x08000c79
 8001440:	08000d31 	.word	0x08000d31

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b090      	sub	sp, #64	; 0x40
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	2228      	movs	r2, #40	; 0x28
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fb2c 	bl	8005ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146e:	2310      	movs	r3, #16
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001476:	2300      	movs	r3, #0
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800147a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fa0b 	bl	80048a0 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001490:	f000 f972 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fc76 	bl	8004da0 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014ba:	f000 f95d 	bl	8001778 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f001 f821 	bl	800254c <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 f932 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000fc 	.word	0x200000fc
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <MX_TIM2_Init+0x94>)
 800154a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800154e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001558:	2209      	movs	r2, #9
 800155a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_TIM2_Init+0x94>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <MX_TIM2_Init+0x94>)
 800156a:	f003 fda7 	bl	80050bc <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001574:	f000 f900 	bl	8001778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_TIM2_Init+0x94>)
 8001586:	f003 ff2b 	bl	80053e0 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001590:	f000 f8f2 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_TIM2_Init+0x94>)
 80015a2:	f004 f90d 	bl	80057c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f000 f8e4 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000150 	.word	0x20000150

080015bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_USART2_UART_Init+0x50>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f004 f954 	bl	80058a0 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fe:	f000 f8bb 	bl	8001778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000198 	.word	0x20000198
 800160c:	40004400 	.word	0x40004400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b49      	ldr	r3, [pc, #292]	; (800174c <MX_GPIO_Init+0x13c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a48      	ldr	r2, [pc, #288]	; (800174c <MX_GPIO_Init+0x13c>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <MX_GPIO_Init+0x13c>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	4b43      	ldr	r3, [pc, #268]	; (800174c <MX_GPIO_Init+0x13c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a42      	ldr	r2, [pc, #264]	; (800174c <MX_GPIO_Init+0x13c>)
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b40      	ldr	r3, [pc, #256]	; (800174c <MX_GPIO_Init+0x13c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b3d      	ldr	r3, [pc, #244]	; (800174c <MX_GPIO_Init+0x13c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a3c      	ldr	r2, [pc, #240]	; (800174c <MX_GPIO_Init+0x13c>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <MX_GPIO_Init+0x13c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <MX_GPIO_Init+0x13c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a36      	ldr	r2, [pc, #216]	; (800174c <MX_GPIO_Init+0x13c>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <MX_GPIO_Init+0x13c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|traffic_light_3_1_Pin|traffic_light_3_0_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 7148 	mov.w	r1, #800	; 0x320
 800168a:	4831      	ldr	r0, [pc, #196]	; (8001750 <MX_GPIO_Init+0x140>)
 800168c:	f000 ff0b 	bl	80024a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, traffic_light_2_0_Pin|traffic_light_1_1_Pin|traffic_light_2_1_Pin|traffic_light_1_0_Pin
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001696:	482f      	ldr	r0, [pc, #188]	; (8001754 <MX_GPIO_Init+0x144>)
 8001698:	f000 ff05 	bl	80024a6 <HAL_GPIO_WritePin>
                          |traffic_light_4_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, traffic_light_4_1_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80016a2:	482d      	ldr	r0, [pc, #180]	; (8001758 <MX_GPIO_Init+0x148>)
 80016a4:	f000 feff 	bl	80024a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <MX_GPIO_Init+0x14c>)
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	4826      	ldr	r0, [pc, #152]	; (8001758 <MX_GPIO_Init+0x148>)
 80016be:	f000 fd57 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80016c2:	2312      	movs	r3, #18
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	481e      	ldr	r0, [pc, #120]	; (8001750 <MX_GPIO_Init+0x140>)
 80016d6:	f000 fd4b 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin traffic_light_3_1_Pin traffic_light_3_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|traffic_light_3_1_Pin|traffic_light_3_0_Pin;
 80016da:	f44f 7348 	mov.w	r3, #800	; 0x320
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <MX_GPIO_Init+0x140>)
 80016f4:	f000 fd3c 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : traffic_light_2_0_Pin traffic_light_1_1_Pin traffic_light_2_1_Pin traffic_light_1_0_Pin
                           traffic_light_4_0_Pin */
  GPIO_InitStruct.Pin = traffic_light_2_0_Pin|traffic_light_1_1_Pin|traffic_light_2_1_Pin|traffic_light_1_0_Pin
 80016f8:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80016fc:	613b      	str	r3, [r7, #16]
                          |traffic_light_4_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	4810      	ldr	r0, [pc, #64]	; (8001754 <MX_GPIO_Init+0x144>)
 8001712:	f000 fd2d 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : traffic_light_4_1_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = traffic_light_4_1_Pin|LED_YELLOW_Pin;
 8001716:	f44f 7320 	mov.w	r3, #640	; 0x280
 800171a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <MX_GPIO_Init+0x148>)
 8001730:	f000 fd1e 	bl	8002170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2028      	movs	r0, #40	; 0x28
 800173a:	f000 fc5c 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173e:	2028      	movs	r0, #40	; 0x28
 8001740:	f000 fc75 	bl	800202e <HAL_NVIC_EnableIRQ>

}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800
 8001754:	40010c00 	.word	0x40010c00
 8001758:	40011000 	.word	0x40011000
 800175c:	10110000 	.word	0x10110000

08001760 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001768:	f000 f894 	bl	8001894 <SCH_Update>
	getKeyInput();
 800176c:	f7fe fd24 	bl	80001b8 <getKeyInput>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001780:	e7fe      	b.n	8001780 <Error_Handler+0x8>
	...

08001784 <SCH_Delete_Task>:

void SCH_Init(void){
	current_index_task = 0;
}

void SCH_Delete_Task(uint32_t ID){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[ID].pTask = 0x0000;
 800178c:	4915      	ldr	r1, [pc, #84]	; (80017e4 <SCH_Delete_Task+0x60>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Delay = 0;
 800179e:	4911      	ldr	r1, [pc, #68]	; (80017e4 <SCH_Delete_Task+0x60>)
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].Period = 0;
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <SCH_Delete_Task+0x60>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3308      	adds	r3, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].RunMe = 0;
 80017c6:	4907      	ldr	r1, [pc, #28]	; (80017e4 <SCH_Delete_Task+0x60>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	330c      	adds	r3, #12
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200001e0 	.word	0x200001e0

080017e8 <SCH_Add_Task>:
void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <SCH_Add_Task+0xa4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b27      	cmp	r3, #39	; 0x27
 80017fa:	d83c      	bhi.n	8001876 <SCH_Add_Task+0x8e>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <SCH_Add_Task+0xa4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <SCH_Add_Task+0xa8>)
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <SCH_Add_Task+0xa4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <SCH_Add_Task+0xa8>)
 800181a:	460b      	mov	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <SCH_Add_Task+0xa4>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <SCH_Add_Task+0xa8>)
 8001832:	460b      	mov	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3308      	adds	r3, #8
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <SCH_Add_Task+0xa4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	4a11      	ldr	r2, [pc, #68]	; (8001890 <SCH_Add_Task+0xa8>)
 800184a:	460b      	mov	r3, r1
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	330c      	adds	r3, #12
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SCH_Add_Task+0xa4>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <SCH_Add_Task+0xa4>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SCH_Add_Task+0xa8>)
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3310      	adds	r3, #16
 8001874:	6018      	str	r0, [r3, #0]
	}
	current_index_task ++;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <SCH_Add_Task+0xa4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <SCH_Add_Task+0xa4>)
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	200000ec 	.word	0x200000ec
 8001890:	200001e0 	.word	0x200001e0

08001894 <SCH_Update>:

void SCH_Update(void){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e048      	b.n	8001932 <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0){
 80018a0:	492a      	ldr	r1, [pc, #168]	; (800194c <SCH_Update+0xb8>)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d013      	beq.n	80018de <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <SCH_Update+0xb8>)
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3304      	adds	r3, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1e59      	subs	r1, r3, #1
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <SCH_Update+0xb8>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4403      	add	r3, r0
 80018d8:	3304      	adds	r3, #4
 80018da:	6019      	str	r1, [r3, #0]
 80018dc:	e026      	b.n	800192c <SCH_Update+0x98>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80018de:	491b      	ldr	r1, [pc, #108]	; (800194c <SCH_Update+0xb8>)
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3308      	adds	r3, #8
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	4816      	ldr	r0, [pc, #88]	; (800194c <SCH_Update+0xb8>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4403      	add	r3, r0
 80018fe:	3304      	adds	r3, #4
 8001900:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe+=1;
 8001902:	4912      	ldr	r1, [pc, #72]	; (800194c <SCH_Update+0xb8>)
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	330c      	adds	r3, #12
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <SCH_Update+0xb8>)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	330c      	adds	r3, #12
 8001928:	4602      	mov	r2, r0
 800192a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <SCH_Update+0xbc>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4293      	cmp	r3, r2
 800193c:	dbb0      	blt.n	80018a0 <SCH_Update+0xc>
		}
	}
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200001e0 	.word	0x200001e0
 8001950:	200000ec 	.word	0x200000ec

08001954 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e03a      	b.n	80019d6 <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[i].RunMe > 0){
 8001960:	4922      	ldr	r1, [pc, #136]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	330c      	adds	r3, #12
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01d      	beq.n	80019b2 <SCH_Dispatch_Tasks+0x5e>
			(*SCH_tasks_G[i].pTask) ();
 8001976:	491d      	ldr	r1, [pc, #116]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4798      	blx	r3
			SCH_tasks_G[i].RunMe -=1;
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	330c      	adds	r3, #12
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	4913      	ldr	r1, [pc, #76]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	4602      	mov	r2, r0
 80019b0:	701a      	strb	r2, [r3, #0]
		}
		if(SCH_tasks_G[i].Period == 0){
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <SCH_Dispatch_Tasks+0x98>)
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	3308      	adds	r3, #8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <SCH_Dispatch_Tasks+0x7c>
			SCH_Delete_Task(i);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff feda 	bl	8001784 <SCH_Delete_Task>
	for(int i = 0; i < current_index_task; i++){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SCH_Dispatch_Tasks+0x9c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4293      	cmp	r3, r2
 80019e0:	dbbe      	blt.n	8001960 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200001e0 	.word	0x200001e0
 80019f0:	200000ec 	.word	0x200000ec

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_MspInit+0x60>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_MspInit+0x60>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_I2C_MspInit+0xb0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d142      	bne.n	8001afe <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481a      	ldr	r0, [pc, #104]	; (8001b10 <HAL_I2C_MspInit+0xb8>)
 8001aa6:	f000 fb63 	bl	8002170 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_I2C_MspInit+0xbc>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_I2C_MspInit+0xbc>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_I2C_MspInit+0xb4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201f      	movs	r0, #31
 8001ae4:	f000 fa87 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ae8:	201f      	movs	r0, #31
 8001aea:	f000 faa0 	bl	800202e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2020      	movs	r0, #32
 8001af4:	f000 fa7f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001af8:	2020      	movs	r0, #32
 8001afa:	f000 fa98 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40010000 	.word	0x40010000

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d113      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_TIM_Base_MspInit+0x44>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <HAL_TIM_Base_MspInit+0x44>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_TIM_Base_MspInit+0x44>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201c      	movs	r0, #28
 8001b48:	f000 fa55 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b4c:	201c      	movs	r0, #28
 8001b4e:	f000 fa6e 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x70>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8a:	61d3      	str	r3, [r2, #28]
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_UART_MspInit+0x74>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_UART_MspInit+0x78>)
 8001bc4:	f000 fad4 	bl	8002170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010800 	.word	0x40010800

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f000 f8d1 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM2_IRQHandler+0x10>)
 8001c32:	f003 fae5 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000150 	.word	0x20000150

08001c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <I2C1_EV_IRQHandler+0x10>)
 8001c46:	f000 fed7 	bl	80029f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200000fc 	.word	0x200000fc

08001c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <I2C1_ER_IRQHandler+0x10>)
 8001c5a:	f001 f83e 	bl	8002cda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000fc 	.word	0x200000fc

08001c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c70:	f000 fc4a 	bl	8002508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f003 fed8 	bl	8005a5c <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20005000 	.word	0x20005000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200000f0 	.word	0x200000f0
 8001ce0:	20000518 	.word	0x20000518

08001ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf0:	f7ff fff8 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cf6:	490c      	ldr	r1, [pc, #48]	; (8001d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d0c:	4c09      	ldr	r4, [pc, #36]	; (8001d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f003 fea5 	bl	8005a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7ff fb4d 	bl	80013bc <main>
  bx lr
 8001d22:	4770      	bx	lr
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001d2c:	08006510 	.word	0x08006510
  ldr r2, =_sbss
 8001d30:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001d34:	20000514 	.word	0x20000514

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_Init+0x28>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_Init+0x28>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f947 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fe4c 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f95f 	bl	800204a <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f927 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000044 	.word	0x20000044
 8001dc0:	2000004c 	.word	0x2000004c
 8001dc4:	20000048 	.word	0x20000048

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_IncTick+0x20>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	2000004c 	.word	0x2000004c
 8001de8:	20000500 	.word	0x20000500

08001dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_GetTick+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000500 	.word	0x20000500

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fff0 	bl	8001dec <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffe0 	bl	8001dec <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000004c 	.word	0x2000004c

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <__NVIC_EnableIRQ+0x34>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff90 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff2d 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff42 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff90 	bl	8001f38 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff35 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d005      	beq.n	8002088 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2204      	movs	r2, #4
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e051      	b.n	800212c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 020e 	bic.w	r2, r2, #14
 8002096:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_DMA_Abort_IT+0xd4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d029      	beq.n	8002106 <HAL_DMA_Abort_IT+0xa2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_DMA_Abort_IT+0xd8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d022      	beq.n	8002102 <HAL_DMA_Abort_IT+0x9e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <HAL_DMA_Abort_IT+0xdc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01a      	beq.n	80020fc <HAL_DMA_Abort_IT+0x98>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_DMA_Abort_IT+0xe0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d012      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x92>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_DMA_Abort_IT+0xe4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00a      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x8c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_DMA_Abort_IT+0xe8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d102      	bne.n	80020ea <HAL_DMA_Abort_IT+0x86>
 80020e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020e8:	e00e      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 80020ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ee:	e00b      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 80020f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f4:	e008      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	e005      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 80020fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002100:	e002      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 8002102:	2310      	movs	r3, #16
 8002104:	e000      	b.n	8002108 <HAL_DMA_Abort_IT+0xa4>
 8002106:	2301      	movs	r3, #1
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_DMA_Abort_IT+0xec>)
 800210a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
    } 
  }
  return status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40020008 	.word	0x40020008
 800213c:	4002001c 	.word	0x4002001c
 8002140:	40020030 	.word	0x40020030
 8002144:	40020044 	.word	0x40020044
 8002148:	40020058 	.word	0x40020058
 800214c:	4002006c 	.word	0x4002006c
 8002150:	40020000 	.word	0x40020000

08002154 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	b2db      	uxtb	r3, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b08b      	sub	sp, #44	; 0x2c
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e169      	b.n	8002458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002184:	2201      	movs	r2, #1
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8158 	bne.w	8002452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a9a      	ldr	r2, [pc, #616]	; (8002410 <HAL_GPIO_Init+0x2a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d05e      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021ac:	4a98      	ldr	r2, [pc, #608]	; (8002410 <HAL_GPIO_Init+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d875      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021b2:	4a98      	ldr	r2, [pc, #608]	; (8002414 <HAL_GPIO_Init+0x2a4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d058      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021b8:	4a96      	ldr	r2, [pc, #600]	; (8002414 <HAL_GPIO_Init+0x2a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d86f      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021be:	4a96      	ldr	r2, [pc, #600]	; (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d052      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021c4:	4a94      	ldr	r2, [pc, #592]	; (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d869      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ca:	4a94      	ldr	r2, [pc, #592]	; (800241c <HAL_GPIO_Init+0x2ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04c      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021d0:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_GPIO_Init+0x2ac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d863      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021d6:	4a92      	ldr	r2, [pc, #584]	; (8002420 <HAL_GPIO_Init+0x2b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d046      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021dc:	4a90      	ldr	r2, [pc, #576]	; (8002420 <HAL_GPIO_Init+0x2b0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d85d      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d82a      	bhi.n	800223c <HAL_GPIO_Init+0xcc>
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d859      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ea:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_GPIO_Init+0x80>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	0800226b 	.word	0x0800226b
 80021f4:	08002245 	.word	0x08002245
 80021f8:	08002257 	.word	0x08002257
 80021fc:	08002299 	.word	0x08002299
 8002200:	0800229f 	.word	0x0800229f
 8002204:	0800229f 	.word	0x0800229f
 8002208:	0800229f 	.word	0x0800229f
 800220c:	0800229f 	.word	0x0800229f
 8002210:	0800229f 	.word	0x0800229f
 8002214:	0800229f 	.word	0x0800229f
 8002218:	0800229f 	.word	0x0800229f
 800221c:	0800229f 	.word	0x0800229f
 8002220:	0800229f 	.word	0x0800229f
 8002224:	0800229f 	.word	0x0800229f
 8002228:	0800229f 	.word	0x0800229f
 800222c:	0800229f 	.word	0x0800229f
 8002230:	0800229f 	.word	0x0800229f
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002261 	.word	0x08002261
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <HAL_GPIO_Init+0x2b4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002242:	e02c      	b.n	800229e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e029      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	3304      	adds	r3, #4
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e024      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	3308      	adds	r3, #8
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e01f      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	330c      	adds	r3, #12
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e01a      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002272:	2304      	movs	r3, #4
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e013      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002280:	2308      	movs	r3, #8
 8002282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	611a      	str	r2, [r3, #16]
          break;
 800228a:	e009      	b.n	80022a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	615a      	str	r2, [r3, #20]
          break;
 8002296:	e003      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          break;
 800229e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2bff      	cmp	r3, #255	; 0xff
 80022a4:	d801      	bhi.n	80022aa <HAL_GPIO_Init+0x13a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_Init+0x13e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d802      	bhi.n	80022bc <HAL_GPIO_Init+0x14c>
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x152>
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	3b08      	subs	r3, #8
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	210f      	movs	r1, #15
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80b1 	beq.w	8002452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2bc>)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <HAL_GPIO_Init+0x2c0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x1ec>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <HAL_GPIO_Init+0x2c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x1e8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3e      	ldr	r2, [pc, #248]	; (8002438 <HAL_GPIO_Init+0x2c8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1e4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3d      	ldr	r2, [pc, #244]	; (800243c <HAL_GPIO_Init+0x2cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x1e0>
 800234c:	2303      	movs	r3, #3
 800234e:	e006      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002350:	2304      	movs	r3, #4
 8002352:	e004      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002354:	2302      	movs	r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 800235c:	2300      	movs	r3, #0
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236e:	492f      	ldr	r1, [pc, #188]	; (800242c <HAL_GPIO_Init+0x2bc>)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	492c      	ldr	r1, [pc, #176]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	4928      	ldr	r1, [pc, #160]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4922      	ldr	r1, [pc, #136]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	491e      	ldr	r1, [pc, #120]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4918      	ldr	r1, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4914      	ldr	r1, [pc, #80]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d021      	beq.n	8002444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e021      	b.n	8002452 <HAL_GPIO_Init+0x2e2>
 800240e:	bf00      	nop
 8002410:	10320000 	.word	0x10320000
 8002414:	10310000 	.word	0x10310000
 8002418:	10220000 	.word	0x10220000
 800241c:	10210000 	.word	0x10210000
 8002420:	10120000 	.word	0x10120000
 8002424:	10110000 	.word	0x10110000
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	40010800 	.word	0x40010800
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40011000 	.word	0x40011000
 800243c:	40011400 	.word	0x40011400
 8002440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_GPIO_Init+0x304>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	43db      	mvns	r3, r3
 800244c:	4909      	ldr	r1, [pc, #36]	; (8002474 <HAL_GPIO_Init+0x304>)
 800244e:	4013      	ands	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f ae8e 	bne.w	8002184 <HAL_GPIO_Init+0x14>
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	372c      	adds	r7, #44	; 0x2c
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
 80024b2:	4613      	mov	r3, r2
 80024b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b6:	787b      	ldrb	r3, [r7, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c2:	e003      	b.n	80024cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f806 	bl	8002538 <HAL_GPIO_EXTI_Callback>
  }
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12b      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fa70 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b0:	f002 fd3e 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a81      	ldr	r2, [pc, #516]	; (80027c0 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d807      	bhi.n	80025d0 <HAL_I2C_Init+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_I2C_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7d      	ldr	r2, [pc, #500]	; (80027c8 <HAL_I2C_Init+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_I2C_Init+0x280>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a6a      	ldr	r2, [pc, #424]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d802      	bhi.n	8002620 <HAL_I2C_Init+0xd4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	e009      	b.n	8002634 <HAL_I2C_Init+0xe8>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_I2C_Init+0x284>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	495c      	ldr	r1, [pc, #368]	; (80027c0 <HAL_I2C_Init+0x274>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d819      	bhi.n	8002688 <HAL_I2C_Init+0x13c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e59      	subs	r1, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_Init+0x138>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e59      	subs	r1, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	e051      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002684:	2304      	movs	r3, #4
 8002686:	e04f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <HAL_I2C_Init+0x168>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e012      	b.n	80026da <HAL_I2C_Init+0x18e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x196>
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_I2C_Init+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e58      	subs	r0, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6911      	ldr	r1, [r2, #16]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	000186a0 	.word	0x000186a0
 80027c4:	001e847f 	.word	0x001e847f
 80027c8:	003d08ff 	.word	0x003d08ff
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d103      	bne.n	80027f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff faec 	bl	8001dec <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	f040 80e0 	bne.w	80029e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2319      	movs	r3, #25
 800282a:	2201      	movs	r2, #1
 800282c:	4970      	ldr	r1, [pc, #448]	; (80029f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f001 fe12 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e0d3      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Master_Transmit+0x50>
 8002848:	2302      	movs	r3, #2
 800284a:	e0cc      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d007      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f001 fca2 	bl	8004204 <I2C_MasterRequestWrite>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e08d      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e0:	e066      	b.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	6a39      	ldr	r1, [r7, #32]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f001 fed0 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d107      	bne.n	800290a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d11b      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x188>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6a39      	ldr	r1, [r7, #32]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f001 fec7 	bl	800471c <I2C_WaitOnBTFFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01a      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d194      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	00100002 	.word	0x00100002
 80029f4:	ffff0000 	.word	0xffff0000

080029f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d003      	beq.n	8002a30 <HAL_I2C_EV_IRQHandler+0x38>
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	f040 80c1 	bne.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10d      	bne.n	8002a66 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a50:	d003      	beq.n	8002a5a <HAL_I2C_EV_IRQHandler+0x62>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_EV_IRQHandler+0x66>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x68>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f000 8132 	beq.w	8002cca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00c      	beq.n	8002a8a <HAL_I2C_EV_IRQHandler+0x92>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	0a5b      	lsrs	r3, r3, #9
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f001 fef5 	bl	800486c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fd99 	bl	80035ba <I2C_Master_SB>
 8002a88:	e092      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_I2C_EV_IRQHandler+0xb2>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	0a5b      	lsrs	r3, r3, #9
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fe0e 	bl	80036c4 <I2C_Master_ADD10>
 8002aa8:	e082      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_I2C_EV_IRQHandler+0xd2>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	0a5b      	lsrs	r3, r3, #9
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fe27 	bl	8003716 <I2C_Master_ADDR>
 8002ac8:	e072      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03b      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae4:	f000 80f3 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	09db      	lsrs	r3, r3, #7
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <HAL_I2C_EV_IRQHandler+0x11c>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9f1 	bl	8002ef4 <I2C_MasterTransmit_TXE>
 8002b12:	e04d      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80d6 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	0a5b      	lsrs	r3, r3, #9
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80cf 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	2b21      	cmp	r3, #33	; 0x21
 8002b34:	d103      	bne.n	8002b3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa78 	bl	800302c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3c:	e0c7      	b.n	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	f040 80c4 	bne.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fae6 	bl	8003118 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b4c:	e0bf      	b.n	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	f000 80b7 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	099b      	lsrs	r3, r3, #6
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00f      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x194>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x194>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb5f 	bl	8003248 <I2C_MasterReceive_RXNE>
 8002b8a:	e011      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 809a 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8093 	beq.w	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fc15 	bl	80033d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bae:	e08e      	b.n	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bb0:	e08d      	b.n	8002cce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e007      	b.n	8002bd4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x20e>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	0a5b      	lsrs	r3, r3, #9
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bfc:	69b9      	ldr	r1, [r7, #24]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 ffe0 	bl	8003bc4 <I2C_Slave_ADDR>
 8002c04:	e066      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x22e>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	0a5b      	lsrs	r3, r3, #9
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f001 f81a 	bl	8003c58 <I2C_Slave_STOPF>
 8002c24:	e056      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c26:	7bbb      	ldrb	r3, [r7, #14]
 8002c28:	2b21      	cmp	r3, #33	; 0x21
 8002c2a:	d002      	beq.n	8002c32 <HAL_I2C_EV_IRQHandler+0x23a>
 8002c2c:	7bbb      	ldrb	r3, [r7, #14]
 8002c2e:	2b29      	cmp	r3, #41	; 0x29
 8002c30:	d125      	bne.n	8002c7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	09db      	lsrs	r3, r3, #7
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x266>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	0a9b      	lsrs	r3, r3, #10
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x266>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fef8 	bl	8003a4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c5c:	e039      	b.n	8002cd2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d033      	beq.n	8002cd2 <HAL_I2C_EV_IRQHandler+0x2da>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	0a5b      	lsrs	r3, r3, #9
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d02d      	beq.n	8002cd2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 ff25 	bl	8003ac6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c7c:	e029      	b.n	8002cd2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	0a9b      	lsrs	r3, r3, #10
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 ff2f 	bl	8003b06 <I2C_SlaveReceive_RXNE>
 8002ca8:	e014      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	0a5b      	lsrs	r3, r3, #9
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 ff5d 	bl	8003b82 <I2C_SlaveReceive_BTF>
 8002cc8:	e004      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_I2C_ER_IRQHandler+0x5e>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d26:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <HAL_I2C_ER_IRQHandler+0x88>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	0a9b      	lsrs	r3, r3, #10
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03f      	beq.n	8002dee <HAL_I2C_ER_IRQHandler+0x114>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d039      	beq.n	8002dee <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002d7a:	7efb      	ldrb	r3, [r7, #27]
 8002d7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d94:	7ebb      	ldrb	r3, [r7, #26]
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d112      	bne.n	8002dc0 <HAL_I2C_ER_IRQHandler+0xe6>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_I2C_ER_IRQHandler+0xe6>
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	2b21      	cmp	r3, #33	; 0x21
 8002da4:	d008      	beq.n	8002db8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
 8002da8:	2b29      	cmp	r3, #41	; 0x29
 8002daa:	d005      	beq.n	8002db8 <HAL_I2C_ER_IRQHandler+0xde>
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b28      	cmp	r3, #40	; 0x28
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b21      	cmp	r3, #33	; 0x21
 8002db6:	d103      	bne.n	8002dc0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f001 f87d 	bl	8003eb8 <I2C_Slave_AF>
 8002dbe:	e016      	b.n	8002dee <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002dd2:	7efb      	ldrb	r3, [r7, #27]
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d002      	beq.n	8002dde <HAL_I2C_ER_IRQHandler+0x104>
 8002dd8:	7efb      	ldrb	r3, [r7, #27]
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	0adb      	lsrs	r3, r3, #11
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <HAL_I2C_ER_IRQHandler+0x13e>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 f8b8 	bl	8003fa0 <I2C_ITError>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3728      	adds	r7, #40	; 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d150      	bne.n	8002fbc <I2C_MasterTransmit_TXE+0xc8>
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b21      	cmp	r3, #33	; 0x21
 8002f1e:	d14d      	bne.n	8002fbc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d01d      	beq.n	8002f62 <I2C_MasterTransmit_TXE+0x6e>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d01a      	beq.n	8002f62 <I2C_MasterTransmit_TXE+0x6e>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f32:	d016      	beq.n	8002f62 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f42:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2211      	movs	r2, #17
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff6c 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f60:	e060      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f70:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d107      	bne.n	8002fac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff81 	bl	8002eac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002faa:	e03b      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff3f 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fba:	e033      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b21      	cmp	r3, #33	; 0x21
 8002fc0:	d005      	beq.n	8002fce <I2C_MasterTransmit_TXE+0xda>
 8002fc2:	7bbb      	ldrb	r3, [r7, #14]
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d12d      	bne.n	8003024 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b22      	cmp	r3, #34	; 0x22
 8002fcc:	d12a      	bne.n	8003024 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fe8:	e01c      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d103      	bne.n	8002ffe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f88e 	bl	8003118 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ffc:	e012      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003022:	e7ff      	b.n	8003024 <I2C_MasterTransmit_TXE+0x130>
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b21      	cmp	r3, #33	; 0x21
 8003044:	d164      	bne.n	8003110 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003074:	e04c      	b.n	8003110 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d01d      	beq.n	80030b8 <I2C_MasterTransmit_BTF+0x8c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b20      	cmp	r3, #32
 8003080:	d01a      	beq.n	80030b8 <I2C_MasterTransmit_BTF+0x8c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003088:	d016      	beq.n	80030b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003098:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2211      	movs	r2, #17
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fec1 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
}
 80030b6:	e02b      	b.n	8003110 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d107      	bne.n	8003102 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fed6 	bl	8002eac <HAL_I2C_MemTxCpltCallback>
}
 8003100:	e006      	b.n	8003110 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fe94 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11d      	bne.n	800316c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10b      	bne.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800314e:	e077      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	b29b      	uxth	r3, r3
 8003156:	121b      	asrs	r3, r3, #8
 8003158:	b2da      	uxtb	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	651a      	str	r2, [r3, #80]	; 0x50
}
 800316a:	e069      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10b      	bne.n	800318c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	b2da      	uxtb	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	651a      	str	r2, [r3, #80]	; 0x50
}
 800318a:	e059      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	2b02      	cmp	r3, #2
 8003192:	d152      	bne.n	800323a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b22      	cmp	r3, #34	; 0x22
 8003198:	d10d      	bne.n	80031b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031b4:	e044      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b21      	cmp	r3, #33	; 0x21
 80031c4:	d112      	bne.n	80031ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031ea:	e029      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d124      	bne.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b21      	cmp	r3, #33	; 0x21
 80031fa:	d121      	bne.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800320a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fe3a 	bl	8002eac <HAL_I2C_MemTxCpltCallback>
}
 8003238:	e002      	b.n	8003240 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff faca 	bl	80027d4 <I2C_Flush_DR>
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b22      	cmp	r3, #34	; 0x22
 800325a:	f040 80b9 	bne.w	80033d0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d921      	bls.n	80032b6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b03      	cmp	r3, #3
 80032a0:	f040 8096 	bne.w	80033d0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80032b4:	e08c      	b.n	80033d0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d07f      	beq.n	80033be <I2C_MasterReceive_RXNE+0x176>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d002      	beq.n	80032ca <I2C_MasterReceive_RXNE+0x82>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d179      	bne.n	80033be <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f001 fa6e 	bl	80047ac <I2C_WaitOnSTOPRequestThroughIT>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d14c      	bne.n	8003370 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d10a      	bne.n	8003346 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fdbd 	bl	8002ebe <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003344:	e044      	b.n	80033d0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d002      	beq.n	800335a <I2C_MasterReceive_RXNE+0x112>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b20      	cmp	r3, #32
 8003358:	d103      	bne.n	8003362 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
 8003360:	e002      	b.n	8003368 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2212      	movs	r2, #18
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fd6e 	bl	8002e4a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800336e:	e02f      	b.n	80033d0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fd8a 	bl	8002ed0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033bc:	e008      	b.n	80033d0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	605a      	str	r2, [r3, #4]
}
 80033ce:	e7ff      	b.n	80033d0 <I2C_MasterReceive_RXNE+0x188>
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d11b      	bne.n	8003428 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003426:	e0c4      	b.n	80035b2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d129      	bne.n	8003486 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003440:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00a      	beq.n	800345e <I2C_MasterReceive_BTF+0x86>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d007      	beq.n	800345e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003484:	e095      	b.n	80035b2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d17d      	bne.n	800358c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d002      	beq.n	800349c <I2C_MasterReceive_BTF+0xc4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b10      	cmp	r3, #16
 800349a:	d108      	bne.n	80034ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e016      	b.n	80034dc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d002      	beq.n	80034ba <I2C_MasterReceive_BTF+0xe2>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d108      	bne.n	80034cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e007      	b.n	80034dc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003536:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d10a      	bne.n	8003562 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fcaf 	bl	8002ebe <HAL_I2C_MemRxCpltCallback>
}
 8003560:	e027      	b.n	80035b2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d002      	beq.n	8003576 <I2C_MasterReceive_BTF+0x19e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b20      	cmp	r3, #32
 8003574:	d103      	bne.n	800357e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
 800357c:	e002      	b.n	8003584 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2212      	movs	r2, #18
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fc60 	bl	8002e4a <HAL_I2C_MasterRxCpltCallback>
}
 800358a:	e012      	b.n	80035b2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d117      	bne.n	80035fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80035e8:	e067      	b.n	80036ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]
}
 80035fc:	e05d      	b.n	80036ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003606:	d133      	bne.n	8003670 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b21      	cmp	r3, #33	; 0x21
 8003612:	d109      	bne.n	8003628 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e008      	b.n	800363a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <I2C_Master_SB+0x92>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d108      	bne.n	800365e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d032      	beq.n	80036ba <I2C_Master_SB+0x100>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02d      	beq.n	80036ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366c:	605a      	str	r2, [r3, #4]
}
 800366e:	e024      	b.n	80036ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	b29b      	uxth	r3, r3
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030f 	orn	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
}
 8003694:	e011      	b.n	80036ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10d      	bne.n	80036ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	11db      	asrs	r3, r3, #7
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0306 	and.w	r3, r3, #6
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f063 030e 	orn	r3, r3, #14
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <I2C_Master_ADD10+0x26>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <I2C_Master_ADD10+0x48>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	605a      	str	r2, [r3, #4]
  }
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003716:	b480      	push	{r7}
 8003718:	b091      	sub	sp, #68	; 0x44
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b22      	cmp	r3, #34	; 0x22
 800373e:	f040 8174 	bne.w	8003a2a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <I2C_Master_ADDR+0x54>
 800374a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10b      	bne.n	800376a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	e16b      	b.n	8003a42 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11d      	bne.n	80037ae <I2C_Master_ADDR+0x98>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800377a:	d118      	bne.n	80037ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	651a      	str	r2, [r3, #80]	; 0x50
 80037ac:	e149      	b.n	8003a42 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e120      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 808a 	bne.w	8003900 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f2:	d137      	bne.n	8003864 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003802:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d113      	bne.n	800383c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	e0f2      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e0de      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	2b08      	cmp	r3, #8
 8003868:	d02e      	beq.n	80038c8 <I2C_Master_ADDR+0x1b2>
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b20      	cmp	r3, #32
 800386e:	d02b      	beq.n	80038c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	2b12      	cmp	r3, #18
 8003874:	d102      	bne.n	800387c <I2C_Master_ADDR+0x166>
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2b01      	cmp	r3, #1
 800387a:	d125      	bne.n	80038c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00e      	beq.n	80038a0 <I2C_Master_ADDR+0x18a>
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2b02      	cmp	r3, #2
 8003886:	d00b      	beq.n	80038a0 <I2C_Master_ADDR+0x18a>
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2b10      	cmp	r3, #16
 800388c:	d008      	beq.n	80038a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	e0ac      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e090      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d158      	bne.n	80039bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	2b04      	cmp	r3, #4
 800390e:	d021      	beq.n	8003954 <I2C_Master_ADDR+0x23e>
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	2b02      	cmp	r3, #2
 8003914:	d01e      	beq.n	8003954 <I2C_Master_ADDR+0x23e>
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b10      	cmp	r3, #16
 800391a:	d01b      	beq.n	8003954 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e012      	b.n	800397a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003962:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003988:	d14b      	bne.n	8003a22 <I2C_Master_ADDR+0x30c>
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003990:	d00b      	beq.n	80039aa <I2C_Master_ADDR+0x294>
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b01      	cmp	r3, #1
 8003996:	d008      	beq.n	80039aa <I2C_Master_ADDR+0x294>
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	2b08      	cmp	r3, #8
 800399c:	d005      	beq.n	80039aa <I2C_Master_ADDR+0x294>
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d002      	beq.n	80039aa <I2C_Master_ADDR+0x294>
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d13b      	bne.n	8003a22 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	e032      	b.n	8003a22 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039da:	d117      	bne.n	8003a0c <I2C_Master_ADDR+0x2f6>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e2:	d00b      	beq.n	80039fc <I2C_Master_ADDR+0x2e6>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d008      	beq.n	80039fc <I2C_Master_ADDR+0x2e6>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d005      	beq.n	80039fc <I2C_Master_ADDR+0x2e6>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d002      	beq.n	80039fc <I2C_Master_ADDR+0x2e6>
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d107      	bne.n	8003a0c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a28:	e00b      	b.n	8003a42 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
}
 8003a40:	e7ff      	b.n	8003a42 <I2C_Master_ADDR+0x32c>
 8003a42:	bf00      	nop
 8003a44:	3744      	adds	r7, #68	; 0x44
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02b      	beq.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d114      	bne.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b29      	cmp	r3, #41	; 0x29
 8003a98:	d111      	bne.n	8003abe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2221      	movs	r2, #33	; 0x21
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2228      	movs	r2, #40	; 0x28
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff f9cf 	bl	8002e5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d011      	beq.n	8003afc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02c      	beq.n	8003b7a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d114      	bne.n	8003b7a <I2C_SlaveReceive_RXNE+0x74>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b2a      	cmp	r3, #42	; 0x2a
 8003b54:	d111      	bne.n	8003b7a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2222      	movs	r2, #34	; 0x22
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2228      	movs	r2, #40	; 0x28
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff f97a 	bl	8002e6e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bde:	2b28      	cmp	r3, #40	; 0x28
 8003be0:	d127      	bne.n	8003c32 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	09db      	lsrs	r3, r3, #7
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	81bb      	strh	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c24:	89ba      	ldrh	r2, [r7, #12]
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff f928 	bl	8002e80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c30:	e00e      	b.n	8003c50 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c76:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb4:	d172      	bne.n	8003d9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b22      	cmp	r3, #34	; 0x22
 8003cba:	d002      	beq.n	8003cc2 <I2C_Slave_STOPF+0x6a>
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc0:	d135      	bne.n	8003d2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f043 0204 	orr.w	r2, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fa2a 	bl	8002154 <HAL_DMA_GetState>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d049      	beq.n	8003d9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	4a69      	ldr	r2, [pc, #420]	; (8003eb0 <I2C_Slave_STOPF+0x258>)
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe f9a6 	bl	8002064 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03d      	beq.n	8003d9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d2c:	e035      	b.n	8003d9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe f9f4 	bl	8002154 <HAL_DMA_GetState>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d014      	beq.n	8003d9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <I2C_Slave_STOPF+0x258>)
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f970 	bl	8002064 <HAL_DMA_Abort_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
 8003d98:	e000      	b.n	8003d9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03e      	beq.n	8003e24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d112      	bne.n	8003dda <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d112      	bne.n	8003e0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8b7 	bl	8003fa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e32:	e039      	b.n	8003ea8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b2a      	cmp	r3, #42	; 0x2a
 8003e38:	d109      	bne.n	8003e4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2228      	movs	r2, #40	; 0x28
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff f810 	bl	8002e6e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b28      	cmp	r3, #40	; 0x28
 8003e58:	d111      	bne.n	8003e7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <I2C_Slave_STOPF+0x25c>)
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff f80f 	bl	8002e9a <HAL_I2C_ListenCpltCallback>
}
 8003e7c:	e014      	b.n	8003ea8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	2b22      	cmp	r3, #34	; 0x22
 8003e84:	d002      	beq.n	8003e8c <I2C_Slave_STOPF+0x234>
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b22      	cmp	r3, #34	; 0x22
 8003e8a:	d10d      	bne.n	8003ea8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe ffe3 	bl	8002e6e <HAL_I2C_SlaveRxCpltCallback>
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	08004309 	.word	0x08004309
 8003eb4:	ffff0000 	.word	0xffff0000

08003eb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d002      	beq.n	8003eda <I2C_Slave_AF+0x22>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d129      	bne.n	8003f2e <I2C_Slave_AF+0x76>
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b28      	cmp	r3, #40	; 0x28
 8003ede:	d126      	bne.n	8003f2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <I2C_Slave_AF+0xe4>)
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003efe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe ffb7 	bl	8002e9a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f2c:	e031      	b.n	8003f92 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b21      	cmp	r3, #33	; 0x21
 8003f32:	d129      	bne.n	8003f88 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <I2C_Slave_AF+0xe4>)
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2221      	movs	r2, #33	; 0x21
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fc2a 	bl	80027d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe ff6b 	bl	8002e5c <HAL_I2C_SlaveTxCpltCallback>
}
 8003f86:	e004      	b.n	8003f92 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f90:	615a      	str	r2, [r3, #20]
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	ffff0000 	.word	0xffff0000

08003fa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d002      	beq.n	8003fc4 <I2C_ITError+0x24>
 8003fbe:	7bbb      	ldrb	r3, [r7, #14]
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d10a      	bne.n	8003fda <I2C_ITError+0x3a>
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b22      	cmp	r3, #34	; 0x22
 8003fc8:	d107      	bne.n	8003fda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe0:	2b28      	cmp	r3, #40	; 0x28
 8003fe2:	d107      	bne.n	8003ff4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2228      	movs	r2, #40	; 0x28
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ff2:	e015      	b.n	8004020 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d00a      	beq.n	800401a <I2C_ITError+0x7a>
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b60      	cmp	r3, #96	; 0x60
 8004008:	d007      	beq.n	800401a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d162      	bne.n	80040f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d020      	beq.n	8004090 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <I2C_ITError+0x25c>)
 8004054:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe f802 	bl	8002064 <HAL_DMA_Abort_IT>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8089 	beq.w	800417a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
 800408e:	e074      	b.n	800417a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4a59      	ldr	r2, [pc, #356]	; (80041fc <I2C_ITError+0x25c>)
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd ffe1 	bl	8002064 <HAL_DMA_Abort_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d10b      	bne.n	80040ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f0:	4610      	mov	r0, r2
 80040f2:	4798      	blx	r3
 80040f4:	e041      	b.n	800417a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b60      	cmp	r3, #96	; 0x60
 8004100:	d125      	bne.n	800414e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d10b      	bne.n	8004136 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe fecb 	bl	8002ee2 <HAL_I2C_AbortCpltCallback>
 800414c:	e015      	b.n	800417a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d10b      	bne.n	8004174 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fe feab 	bl	8002ed0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10e      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d113      	bne.n	80041f4 <I2C_ITError+0x254>
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b28      	cmp	r3, #40	; 0x28
 80041d0:	d110      	bne.n	80041f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <I2C_ITError+0x260>)
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fe53 	bl	8002e9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	08004309 	.word	0x08004309
 8004200:	ffff0000 	.word	0xffff0000

08004204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d006      	beq.n	800422e <I2C_MasterRequestWrite+0x2a>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d003      	beq.n	800422e <I2C_MasterRequestWrite+0x2a>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800422c:	d108      	bne.n	8004240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e00b      	b.n	8004258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b12      	cmp	r3, #18
 8004246:	d107      	bne.n	8004258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f8f7 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	d103      	bne.n	8004288 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e035      	b.n	80042f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004294:	d108      	bne.n	80042a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a4:	611a      	str	r2, [r3, #16]
 80042a6:	e01b      	b.n	80042e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	11db      	asrs	r3, r3, #7
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0306 	and.w	r3, r3, #6
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f063 030f 	orn	r3, r3, #15
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <I2C_MasterRequestWrite+0xfc>)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f940 	bl	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e010      	b.n	80042f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042d6:	897b      	ldrh	r3, [r7, #10]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4907      	ldr	r1, [pc, #28]	; (8004304 <I2C_MasterRequestWrite+0x100>)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f930 	bl	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	00010008 	.word	0x00010008
 8004304:	00010002 	.word	0x00010002

08004308 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004322:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <I2C_DMAAbort+0x148>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <I2C_DMAAbort+0x14c>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0a1a      	lsrs	r2, r3, #8
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800434e:	e00a      	b.n	8004366 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d0ea      	beq.n	800433c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2200      	movs	r2, #0
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	2200      	movs	r2, #0
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a8:	2200      	movs	r2, #0
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d10e      	bne.n	80043f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7fe fd77 	bl	8002ee2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043f4:	e027      	b.n	8004446 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043fc:	2b28      	cmp	r3, #40	; 0x28
 80043fe:	d117      	bne.n	8004430 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2228      	movs	r2, #40	; 0x28
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800442e:	e007      	b.n	8004440 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f7fe fd45 	bl	8002ed0 <HAL_I2C_ErrorCallback>
}
 8004446:	bf00      	nop
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000044 	.word	0x20000044
 8004454:	14f8b589 	.word	0x14f8b589

08004458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	e048      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d044      	beq.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fd fcbb 	bl	8001dec <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d139      	bne.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d10d      	bne.n	80044ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	e00c      	b.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d116      	bne.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e023      	b.n	8004544 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10d      	bne.n	8004522 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	e00c      	b.n	800453c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	43da      	mvns	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	429a      	cmp	r2, r3
 8004540:	d093      	beq.n	800446a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455a:	e071      	b.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456a:	d123      	bne.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e067      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d041      	beq.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045bc:	f7fd fc16 	bl	8001dec <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d136      	bne.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10c      	bne.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e00b      	b.n	800460e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e021      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d10c      	bne.n	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e00b      	b.n	800467c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	f47f af6d 	bne.w	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	e034      	b.n	8004704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8b8 	bl	8004810 <I2C_IsAcknowledgeFailed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e034      	b.n	8004714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d028      	beq.n	8004704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fd fb9b 	bl	8001dec <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11d      	bne.n	8004704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d016      	beq.n	8004704 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e007      	b.n	8004714 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d1c3      	bne.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004728:	e034      	b.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f870 	bl	8004810 <I2C_IsAcknowledgeFailed>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e034      	b.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d028      	beq.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fd fb53 	bl	8001dec <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11d      	bne.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d016      	beq.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e007      	b.n	80047a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d1c3      	bne.n	800472a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	0a1a      	lsrs	r2, r3, #8
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e008      	b.n	80047fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f8:	d0e9      	beq.n	80047ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000044 	.word	0x20000044
 800480c:	14f8b589 	.word	0x14f8b589

08004810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d11b      	bne.n	8004860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800487c:	d103      	bne.n	8004886 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004884:	e007      	b.n	8004896 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800488e:	d102      	bne.n	8004896 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2208      	movs	r2, #8
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e26c      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8087 	beq.w	80049ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048c0:	4b92      	ldr	r3, [pc, #584]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d00c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048cc:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d112      	bne.n	80048fe <HAL_RCC_OscConfig+0x5e>
 80048d8:	4b8c      	ldr	r3, [pc, #560]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d10b      	bne.n	80048fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e6:	4b89      	ldr	r3, [pc, #548]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d06c      	beq.n	80049cc <HAL_RCC_OscConfig+0x12c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d168      	bne.n	80049cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e246      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x76>
 8004908:	4b80      	ldr	r3, [pc, #512]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a7f      	ldr	r2, [pc, #508]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800490e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e02e      	b.n	8004974 <HAL_RCC_OscConfig+0xd4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x98>
 800491e:	4b7b      	ldr	r3, [pc, #492]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7a      	ldr	r2, [pc, #488]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4b78      	ldr	r3, [pc, #480]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a77      	ldr	r2, [pc, #476]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e01d      	b.n	8004974 <HAL_RCC_OscConfig+0xd4>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0xbc>
 8004942:	4b72      	ldr	r3, [pc, #456]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a71      	ldr	r2, [pc, #452]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e00b      	b.n	8004974 <HAL_RCC_OscConfig+0xd4>
 800495c:	4b6b      	ldr	r3, [pc, #428]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6a      	ldr	r2, [pc, #424]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b68      	ldr	r3, [pc, #416]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a67      	ldr	r2, [pc, #412]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 800496e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fd fa36 	bl	8001dec <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fd fa32 	bl	8001dec <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1fa      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0xe4>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fd fa22 	bl	8001dec <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fd fa1e 	bl	8001dec <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e1e6      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049be:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x10c>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d063      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049da:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d11c      	bne.n	8004a2c <HAL_RCC_OscConfig+0x18c>
 80049f2:	4b46      	ldr	r3, [pc, #280]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d116      	bne.n	8004a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_RCC_OscConfig+0x176>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d001      	beq.n	8004a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e1ba      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a16:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4939      	ldr	r1, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2a:	e03a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_OscConfig+0x270>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fd f9d7 	bl	8001dec <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a42:	f7fd f9d3 	bl	8001dec <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e19b      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4927      	ldr	r1, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]
 8004a74:	e015      	b.n	8004aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCC_OscConfig+0x270>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd f9b6 	bl	8001dec <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fd f9b2 	bl	8001dec <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e17a      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d03a      	beq.n	8004b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d019      	beq.n	8004aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abc:	f7fd f996 	bl	8001dec <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd f992 	bl	8001dec <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e15a      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f000 facc 	bl	8005080 <RCC_Delay>
 8004ae8:	e01c      	b.n	8004b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af0:	f7fd f97c 	bl	8001dec <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af6:	e00f      	b.n	8004b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af8:	f7fd f978 	bl	8001dec <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d908      	bls.n	8004b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e140      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	42420000 	.word	0x42420000
 8004b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b9e      	ldr	r3, [pc, #632]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e9      	bne.n	8004af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a6 	beq.w	8004c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b97      	ldr	r3, [pc, #604]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	4b94      	ldr	r3, [pc, #592]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	4a93      	ldr	r2, [pc, #588]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	61d3      	str	r3, [r2, #28]
 8004b4e:	4b91      	ldr	r3, [pc, #580]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	4b8e      	ldr	r3, [pc, #568]	; (8004d98 <HAL_RCC_OscConfig+0x4f8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6a:	4b8b      	ldr	r3, [pc, #556]	; (8004d98 <HAL_RCC_OscConfig+0x4f8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a8a      	ldr	r2, [pc, #552]	; (8004d98 <HAL_RCC_OscConfig+0x4f8>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7fd f939 	bl	8001dec <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fd f935 	bl	8001dec <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	; 0x64
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0fd      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x4f8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x312>
 8004ba4:	4b7b      	ldr	r3, [pc, #492]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4a7a      	ldr	r2, [pc, #488]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6213      	str	r3, [r2, #32]
 8004bb0:	e02d      	b.n	8004c0e <HAL_RCC_OscConfig+0x36e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x334>
 8004bba:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4a75      	ldr	r2, [pc, #468]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6213      	str	r3, [r2, #32]
 8004bc6:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4a72      	ldr	r2, [pc, #456]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6213      	str	r3, [r2, #32]
 8004bd2:	e01c      	b.n	8004c0e <HAL_RCC_OscConfig+0x36e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x356>
 8004bdc:	4b6d      	ldr	r3, [pc, #436]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	4a6c      	ldr	r2, [pc, #432]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	6213      	str	r3, [r2, #32]
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6213      	str	r3, [r2, #32]
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0x36e>
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4a66      	ldr	r2, [pc, #408]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	6213      	str	r3, [r2, #32]
 8004c02:	4b64      	ldr	r3, [pc, #400]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4a63      	ldr	r2, [pc, #396]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d015      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c16:	f7fd f8e9 	bl	8001dec <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fd f8e5 	bl	8001dec <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0ab      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ee      	beq.n	8004c1e <HAL_RCC_OscConfig+0x37e>
 8004c40:	e014      	b.n	8004c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c42:	f7fd f8d3 	bl	8001dec <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd f8cf 	bl	8001dec <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e095      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	4b4c      	ldr	r3, [pc, #304]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ee      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c72:	4b48      	ldr	r3, [pc, #288]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8081 	beq.w	8004d8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c88:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d061      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d146      	bne.n	8004d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCC_OscConfig+0x4fc>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fd f8a3 	bl	8001dec <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fd f89f 	bl	8001dec <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e067      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cbc:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d108      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cd2:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	492d      	ldr	r1, [pc, #180]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce4:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a19      	ldr	r1, [r3, #32]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	4927      	ldr	r1, [pc, #156]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x4fc>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fd f873 	bl	8001dec <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd f86f 	bl	8001dec <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e037      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x46a>
 8004d28:	e02f      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <HAL_RCC_OscConfig+0x4fc>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fd f85c 	bl	8001dec <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fd f858 	bl	8001dec <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e020      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x498>
 8004d56:	e018      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e013      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	42420060 	.word	0x42420060

08004da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0d0      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d910      	bls.n	8004de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b67      	ldr	r3, [pc, #412]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0207 	bic.w	r2, r3, #7
 8004dca:	4965      	ldr	r1, [pc, #404]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd2:	4b63      	ldr	r3, [pc, #396]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0b8      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d020      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dfc:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a58      	ldr	r2, [pc, #352]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e14:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a52      	ldr	r2, [pc, #328]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e20:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	494d      	ldr	r1, [pc, #308]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d040      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d115      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e07f      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e073      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e06b      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4936      	ldr	r1, [pc, #216]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fc ffac 	bl	8001dec <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fc ffa8 	bl	8001dec <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e053      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d210      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	4922      	ldr	r1, [pc, #136]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e032      	b.n	8004f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4916      	ldr	r1, [pc, #88]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f1a:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	490e      	ldr	r1, [pc, #56]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f2e:	f000 f821 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004f32:	4602      	mov	r2, r0
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	490a      	ldr	r1, [pc, #40]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	5ccb      	ldrb	r3, [r1, r3]
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_RCC_ClockConfig+0x1cc>)
 8004f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f4a:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <HAL_RCC_ClockConfig+0x1d0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc ff0a 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40022000 	.word	0x40022000
 8004f64:	40021000 	.word	0x40021000
 8004f68:	080064a8 	.word	0x080064a8
 8004f6c:	20000044 	.word	0x20000044
 8004f70:	20000048 	.word	0x20000048

08004f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x36>
 8004fa2:	e027      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa6:	613b      	str	r3, [r7, #16]
      break;
 8004fa8:	e027      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0c9b      	lsrs	r3, r3, #18
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fb4:	5cd3      	ldrb	r3, [r2, r3]
 8004fb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	0c5b      	lsrs	r3, r3, #17
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	4a11      	ldr	r2, [pc, #68]	; (8005014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fce:	5cd3      	ldrb	r3, [r2, r3]
 8004fd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a0d      	ldr	r2, [pc, #52]	; (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd6:	fb02 f203 	mul.w	r2, r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e004      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	613b      	str	r3, [r7, #16]
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ff6:	613b      	str	r3, [r7, #16]
      break;
 8004ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ffa:	693b      	ldr	r3, [r7, #16]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	007a1200 	.word	0x007a1200
 8005010:	080064c0 	.word	0x080064c0
 8005014:	080064d0 	.word	0x080064d0
 8005018:	003d0900 	.word	0x003d0900

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <HAL_RCC_GetHCLKFreq+0x10>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	20000044 	.word	0x20000044

08005030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005034:	f7ff fff2 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	080064b8 	.word	0x080064b8

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800505c:	f7ff ffde 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	0adb      	lsrs	r3, r3, #11
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4903      	ldr	r1, [pc, #12]	; (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	080064b8 	.word	0x080064b8

08005080 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <RCC_Delay+0x34>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <RCC_Delay+0x38>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0a5b      	lsrs	r3, r3, #9
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800509c:	bf00      	nop
  }
  while (Delay --);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	60fa      	str	r2, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f9      	bne.n	800509c <RCC_Delay+0x1c>
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	20000044 	.word	0x20000044
 80050b8:	10624dd3 	.word	0x10624dd3

080050bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e041      	b.n	8005152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fc fd18 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 fa5c 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e03a      	b.n	80051ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_Base_Start_IT+0x98>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d009      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_TIM_Base_Start_IT+0xa0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d111      	bne.n	80051d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d010      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e007      	b.n	80051e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f998 	bl	8005580 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f98b 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f99a 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d020      	beq.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f972 	bl	8005580 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f965 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f974 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d020      	beq.n	80052fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0208 	mvn.w	r2, #8
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f94c 	bl	8005580 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f93f 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f94e 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d020      	beq.n	8005348 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01b      	beq.n	8005348 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0210 	mvn.w	r2, #16
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2208      	movs	r2, #8
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f926 	bl	8005580 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f919 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f928 	bl	8005592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0201 	mvn.w	r2, #1
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc f9fa 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa7f 	bl	800588e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8f8 	bl	80055a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0220 	mvn.w	r2, #32
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa52 	bl	800587c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_ConfigClockSource+0x1c>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e0b4      	b.n	8005566 <HAL_TIM_ConfigClockSource+0x186>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800541a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d03e      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	f200 8087 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	f000 8086 	beq.w	8005552 <HAL_TIM_ConfigClockSource+0x172>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d87f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b70      	cmp	r3, #112	; 0x70
 800544e:	d01a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xa6>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d87b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b60      	cmp	r3, #96	; 0x60
 8005456:	d050      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x11a>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d877      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b50      	cmp	r3, #80	; 0x50
 800545e:	d03c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xfa>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d873      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d058      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x13a>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d86f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d064      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d86b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d060      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d867      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d05c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005480:	2b10      	cmp	r3, #16
 8005482:	d05a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	e062      	b.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6899      	ldr	r1, [r3, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f000 f974 	bl	8005782 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	609a      	str	r2, [r3, #8]
      break;
 80054b2:	e04f      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f000 f95d 	bl	8005782 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d6:	609a      	str	r2, [r3, #8]
      break;
 80054d8:	e03c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 f8d4 	bl	8005694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2150      	movs	r1, #80	; 0x50
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f92b 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 80054f8:	e02c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	461a      	mov	r2, r3
 8005508:	f000 f8f2 	bl	80056f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2160      	movs	r1, #96	; 0x60
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f91b 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005518:	e01c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	461a      	mov	r2, r3
 8005528:	f000 f8b4 	bl	8005694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f90b 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005538:	e00c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 f902 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 800554a:	e003      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	e000      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
	...

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <TIM_Base_SetConfig+0xd0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_Base_SetConfig+0x30>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d007      	beq.n	80055e8 <TIM_Base_SetConfig+0x30>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <TIM_Base_SetConfig+0xd4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_Base_SetConfig+0x30>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <TIM_Base_SetConfig+0xd8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a22      	ldr	r2, [pc, #136]	; (8005688 <TIM_Base_SetConfig+0xd0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0x62>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0x62>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <TIM_Base_SetConfig+0xd4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0x62>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <TIM_Base_SetConfig+0xd8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <TIM_Base_SetConfig+0xd0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d103      	bne.n	8005660 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]
  }
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800

08005694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0201 	bic.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 030a 	bic.w	r3, r3, #10
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0210 	bic.w	r2, r3, #16
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	031b      	lsls	r3, r3, #12
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800572c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	f043 0307 	orr.w	r3, r3, #7
 8005770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	021a      	lsls	r2, r3, #8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	609a      	str	r2, [r3, #8]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e046      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a10      	ldr	r2, [pc, #64]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800

0800587c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e042      	b.n	8005938 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fc f94a 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f82b 	bl	8005940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800597a:	f023 030c 	bic.w	r3, r3, #12
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	430b      	orrs	r3, r1
 8005986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <UART_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7ff fb56 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7ff fb3e 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 80059b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <UART_SetConfig+0x118>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	0119      	lsls	r1, r3, #4
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	; 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0c:	4419      	add	r1, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <UART_SetConfig+0x118>)
 8005a26:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2064      	movs	r0, #100	; 0x64
 8005a2e:	fb00 f303 	mul.w	r3, r0, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	; 0x32
 8005a38:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <UART_SetConfig+0x118>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	440a      	add	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40013800 	.word	0x40013800
 8005a58:	51eb851f 	.word	0x51eb851f

08005a5c <__errno>:
 8005a5c:	4b01      	ldr	r3, [pc, #4]	; (8005a64 <__errno+0x8>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000050 	.word	0x20000050

08005a68 <__libc_init_array>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	4d0c      	ldr	r5, [pc, #48]	; (8005aa0 <__libc_init_array+0x38>)
 8005a6e:	4c0d      	ldr	r4, [pc, #52]	; (8005aa4 <__libc_init_array+0x3c>)
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	d109      	bne.n	8005a8c <__libc_init_array+0x24>
 8005a78:	f000 fc5c 	bl	8006334 <_init>
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	4d0a      	ldr	r5, [pc, #40]	; (8005aa8 <__libc_init_array+0x40>)
 8005a80:	4c0a      	ldr	r4, [pc, #40]	; (8005aac <__libc_init_array+0x44>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	42a6      	cmp	r6, r4
 8005a88:	d105      	bne.n	8005a96 <__libc_init_array+0x2e>
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a90:	4798      	blx	r3
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7ee      	b.n	8005a74 <__libc_init_array+0xc>
 8005a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9a:	4798      	blx	r3
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7f2      	b.n	8005a86 <__libc_init_array+0x1e>
 8005aa0:	08006508 	.word	0x08006508
 8005aa4:	08006508 	.word	0x08006508
 8005aa8:	08006508 	.word	0x08006508
 8005aac:	0800650c 	.word	0x0800650c

08005ab0 <memset>:
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d100      	bne.n	8005aba <memset+0xa>
 8005ab8:	4770      	bx	lr
 8005aba:	f803 1b01 	strb.w	r1, [r3], #1
 8005abe:	e7f9      	b.n	8005ab4 <memset+0x4>

08005ac0 <siprintf>:
 8005ac0:	b40e      	push	{r1, r2, r3}
 8005ac2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ac6:	b500      	push	{lr}
 8005ac8:	b09c      	sub	sp, #112	; 0x70
 8005aca:	ab1d      	add	r3, sp, #116	; 0x74
 8005acc:	9002      	str	r0, [sp, #8]
 8005ace:	9006      	str	r0, [sp, #24]
 8005ad0:	9107      	str	r1, [sp, #28]
 8005ad2:	9104      	str	r1, [sp, #16]
 8005ad4:	4808      	ldr	r0, [pc, #32]	; (8005af8 <siprintf+0x38>)
 8005ad6:	4909      	ldr	r1, [pc, #36]	; (8005afc <siprintf+0x3c>)
 8005ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005adc:	9105      	str	r1, [sp, #20]
 8005ade:	6800      	ldr	r0, [r0, #0]
 8005ae0:	a902      	add	r1, sp, #8
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	f000 f868 	bl	8005bb8 <_svfiprintf_r>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	b01c      	add	sp, #112	; 0x70
 8005af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af4:	b003      	add	sp, #12
 8005af6:	4770      	bx	lr
 8005af8:	20000050 	.word	0x20000050
 8005afc:	ffff0208 	.word	0xffff0208

08005b00 <__ssputs_r>:
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	688e      	ldr	r6, [r1, #8]
 8005b06:	4682      	mov	sl, r0
 8005b08:	429e      	cmp	r6, r3
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4690      	mov	r8, r2
 8005b0e:	461f      	mov	r7, r3
 8005b10:	d838      	bhi.n	8005b84 <__ssputs_r+0x84>
 8005b12:	898a      	ldrh	r2, [r1, #12]
 8005b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b18:	d032      	beq.n	8005b80 <__ssputs_r+0x80>
 8005b1a:	6825      	ldr	r5, [r4, #0]
 8005b1c:	6909      	ldr	r1, [r1, #16]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	eba5 0901 	sub.w	r9, r5, r1
 8005b24:	6965      	ldr	r5, [r4, #20]
 8005b26:	444b      	add	r3, r9
 8005b28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b30:	106d      	asrs	r5, r5, #1
 8005b32:	429d      	cmp	r5, r3
 8005b34:	bf38      	it	cc
 8005b36:	461d      	movcc	r5, r3
 8005b38:	0553      	lsls	r3, r2, #21
 8005b3a:	d531      	bpl.n	8005ba0 <__ssputs_r+0xa0>
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f000 fb53 	bl	80061e8 <_malloc_r>
 8005b42:	4606      	mov	r6, r0
 8005b44:	b950      	cbnz	r0, 8005b5c <__ssputs_r+0x5c>
 8005b46:	230c      	movs	r3, #12
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	f8ca 3000 	str.w	r3, [sl]
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	464a      	mov	r2, r9
 8005b5e:	6921      	ldr	r1, [r4, #16]
 8005b60:	f000 face 	bl	8006100 <memcpy>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	6126      	str	r6, [r4, #16]
 8005b72:	444e      	add	r6, r9
 8005b74:	6026      	str	r6, [r4, #0]
 8005b76:	463e      	mov	r6, r7
 8005b78:	6165      	str	r5, [r4, #20]
 8005b7a:	eba5 0509 	sub.w	r5, r5, r9
 8005b7e:	60a5      	str	r5, [r4, #8]
 8005b80:	42be      	cmp	r6, r7
 8005b82:	d900      	bls.n	8005b86 <__ssputs_r+0x86>
 8005b84:	463e      	mov	r6, r7
 8005b86:	4632      	mov	r2, r6
 8005b88:	4641      	mov	r1, r8
 8005b8a:	6820      	ldr	r0, [r4, #0]
 8005b8c:	f000 fac6 	bl	800611c <memmove>
 8005b90:	68a3      	ldr	r3, [r4, #8]
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	1b9b      	subs	r3, r3, r6
 8005b96:	4432      	add	r2, r6
 8005b98:	2000      	movs	r0, #0
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	6022      	str	r2, [r4, #0]
 8005b9e:	e7db      	b.n	8005b58 <__ssputs_r+0x58>
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	f000 fb7b 	bl	800629c <_realloc_r>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d1e1      	bne.n	8005b70 <__ssputs_r+0x70>
 8005bac:	4650      	mov	r0, sl
 8005bae:	6921      	ldr	r1, [r4, #16]
 8005bb0:	f000 face 	bl	8006150 <_free_r>
 8005bb4:	e7c7      	b.n	8005b46 <__ssputs_r+0x46>
	...

08005bb8 <_svfiprintf_r>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	4698      	mov	r8, r3
 8005bbe:	898b      	ldrh	r3, [r1, #12]
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	061b      	lsls	r3, r3, #24
 8005bc4:	460d      	mov	r5, r1
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	b09d      	sub	sp, #116	; 0x74
 8005bca:	d50e      	bpl.n	8005bea <_svfiprintf_r+0x32>
 8005bcc:	690b      	ldr	r3, [r1, #16]
 8005bce:	b963      	cbnz	r3, 8005bea <_svfiprintf_r+0x32>
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	f000 fb09 	bl	80061e8 <_malloc_r>
 8005bd6:	6028      	str	r0, [r5, #0]
 8005bd8:	6128      	str	r0, [r5, #16]
 8005bda:	b920      	cbnz	r0, 8005be6 <_svfiprintf_r+0x2e>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e0d1      	b.n	8005d8a <_svfiprintf_r+0x1d2>
 8005be6:	2340      	movs	r3, #64	; 0x40
 8005be8:	616b      	str	r3, [r5, #20]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9309      	str	r3, [sp, #36]	; 0x24
 8005bee:	2320      	movs	r3, #32
 8005bf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bf4:	2330      	movs	r3, #48	; 0x30
 8005bf6:	f04f 0901 	mov.w	r9, #1
 8005bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005da4 <_svfiprintf_r+0x1ec>
 8005c02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c06:	4623      	mov	r3, r4
 8005c08:	469a      	mov	sl, r3
 8005c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c0e:	b10a      	cbz	r2, 8005c14 <_svfiprintf_r+0x5c>
 8005c10:	2a25      	cmp	r2, #37	; 0x25
 8005c12:	d1f9      	bne.n	8005c08 <_svfiprintf_r+0x50>
 8005c14:	ebba 0b04 	subs.w	fp, sl, r4
 8005c18:	d00b      	beq.n	8005c32 <_svfiprintf_r+0x7a>
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4638      	mov	r0, r7
 8005c22:	f7ff ff6d 	bl	8005b00 <__ssputs_r>
 8005c26:	3001      	adds	r0, #1
 8005c28:	f000 80aa 	beq.w	8005d80 <_svfiprintf_r+0x1c8>
 8005c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c2e:	445a      	add	r2, fp
 8005c30:	9209      	str	r2, [sp, #36]	; 0x24
 8005c32:	f89a 3000 	ldrb.w	r3, [sl]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80a2 	beq.w	8005d80 <_svfiprintf_r+0x1c8>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c46:	f10a 0a01 	add.w	sl, sl, #1
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	9307      	str	r3, [sp, #28]
 8005c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c52:	931a      	str	r3, [sp, #104]	; 0x68
 8005c54:	4654      	mov	r4, sl
 8005c56:	2205      	movs	r2, #5
 8005c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5c:	4851      	ldr	r0, [pc, #324]	; (8005da4 <_svfiprintf_r+0x1ec>)
 8005c5e:	f000 fa41 	bl	80060e4 <memchr>
 8005c62:	9a04      	ldr	r2, [sp, #16]
 8005c64:	b9d8      	cbnz	r0, 8005c9e <_svfiprintf_r+0xe6>
 8005c66:	06d0      	lsls	r0, r2, #27
 8005c68:	bf44      	itt	mi
 8005c6a:	2320      	movmi	r3, #32
 8005c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c70:	0711      	lsls	r1, r2, #28
 8005c72:	bf44      	itt	mi
 8005c74:	232b      	movmi	r3, #43	; 0x2b
 8005c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d015      	beq.n	8005cae <_svfiprintf_r+0xf6>
 8005c82:	4654      	mov	r4, sl
 8005c84:	2000      	movs	r0, #0
 8005c86:	f04f 0c0a 	mov.w	ip, #10
 8005c8a:	9a07      	ldr	r2, [sp, #28]
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c92:	3b30      	subs	r3, #48	; 0x30
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d94e      	bls.n	8005d36 <_svfiprintf_r+0x17e>
 8005c98:	b1b0      	cbz	r0, 8005cc8 <_svfiprintf_r+0x110>
 8005c9a:	9207      	str	r2, [sp, #28]
 8005c9c:	e014      	b.n	8005cc8 <_svfiprintf_r+0x110>
 8005c9e:	eba0 0308 	sub.w	r3, r0, r8
 8005ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	46a2      	mov	sl, r4
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	e7d2      	b.n	8005c54 <_svfiprintf_r+0x9c>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	1d19      	adds	r1, r3, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	9103      	str	r1, [sp, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfbb      	ittet	lt
 8005cba:	425b      	neglt	r3, r3
 8005cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005cc0:	9307      	strge	r3, [sp, #28]
 8005cc2:	9307      	strlt	r3, [sp, #28]
 8005cc4:	bfb8      	it	lt
 8005cc6:	9204      	strlt	r2, [sp, #16]
 8005cc8:	7823      	ldrb	r3, [r4, #0]
 8005cca:	2b2e      	cmp	r3, #46	; 0x2e
 8005ccc:	d10c      	bne.n	8005ce8 <_svfiprintf_r+0x130>
 8005cce:	7863      	ldrb	r3, [r4, #1]
 8005cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd2:	d135      	bne.n	8005d40 <_svfiprintf_r+0x188>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	3402      	adds	r4, #2
 8005cd8:	1d1a      	adds	r2, r3, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	9203      	str	r2, [sp, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfb8      	it	lt
 8005ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005db4 <_svfiprintf_r+0x1fc>
 8005cec:	2203      	movs	r2, #3
 8005cee:	4650      	mov	r0, sl
 8005cf0:	7821      	ldrb	r1, [r4, #0]
 8005cf2:	f000 f9f7 	bl	80060e4 <memchr>
 8005cf6:	b140      	cbz	r0, 8005d0a <_svfiprintf_r+0x152>
 8005cf8:	2340      	movs	r3, #64	; 0x40
 8005cfa:	eba0 000a 	sub.w	r0, r0, sl
 8005cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8005d02:	9b04      	ldr	r3, [sp, #16]
 8005d04:	3401      	adds	r4, #1
 8005d06:	4303      	orrs	r3, r0
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0e:	2206      	movs	r2, #6
 8005d10:	4825      	ldr	r0, [pc, #148]	; (8005da8 <_svfiprintf_r+0x1f0>)
 8005d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d16:	f000 f9e5 	bl	80060e4 <memchr>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d038      	beq.n	8005d90 <_svfiprintf_r+0x1d8>
 8005d1e:	4b23      	ldr	r3, [pc, #140]	; (8005dac <_svfiprintf_r+0x1f4>)
 8005d20:	bb1b      	cbnz	r3, 8005d6a <_svfiprintf_r+0x1b2>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	3307      	adds	r3, #7
 8005d26:	f023 0307 	bic.w	r3, r3, #7
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	9303      	str	r3, [sp, #12]
 8005d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d30:	4433      	add	r3, r6
 8005d32:	9309      	str	r3, [sp, #36]	; 0x24
 8005d34:	e767      	b.n	8005c06 <_svfiprintf_r+0x4e>
 8005d36:	460c      	mov	r4, r1
 8005d38:	2001      	movs	r0, #1
 8005d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d3e:	e7a5      	b.n	8005c8c <_svfiprintf_r+0xd4>
 8005d40:	2300      	movs	r3, #0
 8005d42:	f04f 0c0a 	mov.w	ip, #10
 8005d46:	4619      	mov	r1, r3
 8005d48:	3401      	adds	r4, #1
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d52:	3a30      	subs	r2, #48	; 0x30
 8005d54:	2a09      	cmp	r2, #9
 8005d56:	d903      	bls.n	8005d60 <_svfiprintf_r+0x1a8>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0c5      	beq.n	8005ce8 <_svfiprintf_r+0x130>
 8005d5c:	9105      	str	r1, [sp, #20]
 8005d5e:	e7c3      	b.n	8005ce8 <_svfiprintf_r+0x130>
 8005d60:	4604      	mov	r4, r0
 8005d62:	2301      	movs	r3, #1
 8005d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d68:	e7f0      	b.n	8005d4c <_svfiprintf_r+0x194>
 8005d6a:	ab03      	add	r3, sp, #12
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4638      	mov	r0, r7
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <_svfiprintf_r+0x1f8>)
 8005d74:	a904      	add	r1, sp, #16
 8005d76:	f3af 8000 	nop.w
 8005d7a:	1c42      	adds	r2, r0, #1
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	d1d6      	bne.n	8005d2e <_svfiprintf_r+0x176>
 8005d80:	89ab      	ldrh	r3, [r5, #12]
 8005d82:	065b      	lsls	r3, r3, #25
 8005d84:	f53f af2c 	bmi.w	8005be0 <_svfiprintf_r+0x28>
 8005d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d8a:	b01d      	add	sp, #116	; 0x74
 8005d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d90:	ab03      	add	r3, sp, #12
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	462a      	mov	r2, r5
 8005d96:	4638      	mov	r0, r7
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <_svfiprintf_r+0x1f8>)
 8005d9a:	a904      	add	r1, sp, #16
 8005d9c:	f000 f87c 	bl	8005e98 <_printf_i>
 8005da0:	e7eb      	b.n	8005d7a <_svfiprintf_r+0x1c2>
 8005da2:	bf00      	nop
 8005da4:	080064d2 	.word	0x080064d2
 8005da8:	080064dc 	.word	0x080064dc
 8005dac:	00000000 	.word	0x00000000
 8005db0:	08005b01 	.word	0x08005b01
 8005db4:	080064d8 	.word	0x080064d8

08005db8 <_printf_common>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	4699      	mov	r9, r3
 8005dc0:	688a      	ldr	r2, [r1, #8]
 8005dc2:	690b      	ldr	r3, [r1, #16]
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bfb8      	it	lt
 8005dca:	4613      	movlt	r3, r2
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd8:	b10a      	cbz	r2, 8005dde <_printf_common+0x26>
 8005dda:	3301      	adds	r3, #1
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0699      	lsls	r1, r3, #26
 8005de2:	bf42      	ittt	mi
 8005de4:	6833      	ldrmi	r3, [r6, #0]
 8005de6:	3302      	addmi	r3, #2
 8005de8:	6033      	strmi	r3, [r6, #0]
 8005dea:	6825      	ldr	r5, [r4, #0]
 8005dec:	f015 0506 	ands.w	r5, r5, #6
 8005df0:	d106      	bne.n	8005e00 <_printf_common+0x48>
 8005df2:	f104 0a19 	add.w	sl, r4, #25
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	6832      	ldr	r2, [r6, #0]
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc28      	bgt.n	8005e52 <_printf_common+0x9a>
 8005e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e04:	1e13      	subs	r3, r2, #0
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	0692      	lsls	r2, r2, #26
 8005e0e:	d42d      	bmi.n	8005e6c <_printf_common+0xb4>
 8005e10:	4649      	mov	r1, r9
 8005e12:	4638      	mov	r0, r7
 8005e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e18:	47c0      	blx	r8
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d020      	beq.n	8005e60 <_printf_common+0xa8>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	68e5      	ldr	r5, [r4, #12]
 8005e22:	f003 0306 	and.w	r3, r3, #6
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	bf18      	it	ne
 8005e2a:	2500      	movne	r5, #0
 8005e2c:	6832      	ldr	r2, [r6, #0]
 8005e2e:	f04f 0600 	mov.w	r6, #0
 8005e32:	68a3      	ldr	r3, [r4, #8]
 8005e34:	bf08      	it	eq
 8005e36:	1aad      	subeq	r5, r5, r2
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	bf08      	it	eq
 8005e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e40:	4293      	cmp	r3, r2
 8005e42:	bfc4      	itt	gt
 8005e44:	1a9b      	subgt	r3, r3, r2
 8005e46:	18ed      	addgt	r5, r5, r3
 8005e48:	341a      	adds	r4, #26
 8005e4a:	42b5      	cmp	r5, r6
 8005e4c:	d11a      	bne.n	8005e84 <_printf_common+0xcc>
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e008      	b.n	8005e64 <_printf_common+0xac>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4652      	mov	r2, sl
 8005e56:	4649      	mov	r1, r9
 8005e58:	4638      	mov	r0, r7
 8005e5a:	47c0      	blx	r8
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d103      	bne.n	8005e68 <_printf_common+0xb0>
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	3501      	adds	r5, #1
 8005e6a:	e7c4      	b.n	8005df6 <_printf_common+0x3e>
 8005e6c:	2030      	movs	r0, #48	; 0x30
 8005e6e:	18e1      	adds	r1, r4, r3
 8005e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e7a:	4422      	add	r2, r4
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e82:	e7c5      	b.n	8005e10 <_printf_common+0x58>
 8005e84:	2301      	movs	r3, #1
 8005e86:	4622      	mov	r2, r4
 8005e88:	4649      	mov	r1, r9
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c0      	blx	r8
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d0e6      	beq.n	8005e60 <_printf_common+0xa8>
 8005e92:	3601      	adds	r6, #1
 8005e94:	e7d9      	b.n	8005e4a <_printf_common+0x92>
	...

08005e98 <_printf_i>:
 8005e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	7e27      	ldrb	r7, [r4, #24]
 8005ea0:	4691      	mov	r9, r2
 8005ea2:	2f78      	cmp	r7, #120	; 0x78
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	469a      	mov	sl, r3
 8005ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eae:	d807      	bhi.n	8005ec0 <_printf_i+0x28>
 8005eb0:	2f62      	cmp	r7, #98	; 0x62
 8005eb2:	d80a      	bhi.n	8005eca <_printf_i+0x32>
 8005eb4:	2f00      	cmp	r7, #0
 8005eb6:	f000 80d9 	beq.w	800606c <_printf_i+0x1d4>
 8005eba:	2f58      	cmp	r7, #88	; 0x58
 8005ebc:	f000 80a4 	beq.w	8006008 <_printf_i+0x170>
 8005ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ec8:	e03a      	b.n	8005f40 <_printf_i+0xa8>
 8005eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ece:	2b15      	cmp	r3, #21
 8005ed0:	d8f6      	bhi.n	8005ec0 <_printf_i+0x28>
 8005ed2:	a001      	add	r0, pc, #4	; (adr r0, 8005ed8 <_printf_i+0x40>)
 8005ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005ec1 	.word	0x08005ec1
 8005ee4:	08005ec1 	.word	0x08005ec1
 8005ee8:	08005ec1 	.word	0x08005ec1
 8005eec:	08005ec1 	.word	0x08005ec1
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005ec1 	.word	0x08005ec1
 8005ef8:	08005ec1 	.word	0x08005ec1
 8005efc:	08005ec1 	.word	0x08005ec1
 8005f00:	08005ec1 	.word	0x08005ec1
 8005f04:	08006053 	.word	0x08006053
 8005f08:	08005f75 	.word	0x08005f75
 8005f0c:	08006035 	.word	0x08006035
 8005f10:	08005ec1 	.word	0x08005ec1
 8005f14:	08005ec1 	.word	0x08005ec1
 8005f18:	08006075 	.word	0x08006075
 8005f1c:	08005ec1 	.word	0x08005ec1
 8005f20:	08005f75 	.word	0x08005f75
 8005f24:	08005ec1 	.word	0x08005ec1
 8005f28:	08005ec1 	.word	0x08005ec1
 8005f2c:	0800603d 	.word	0x0800603d
 8005f30:	680b      	ldr	r3, [r1, #0]
 8005f32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f36:	1d1a      	adds	r2, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	600a      	str	r2, [r1, #0]
 8005f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0a4      	b.n	800608e <_printf_i+0x1f6>
 8005f44:	6825      	ldr	r5, [r4, #0]
 8005f46:	6808      	ldr	r0, [r1, #0]
 8005f48:	062e      	lsls	r6, r5, #24
 8005f4a:	f100 0304 	add.w	r3, r0, #4
 8005f4e:	d50a      	bpl.n	8005f66 <_printf_i+0xce>
 8005f50:	6805      	ldr	r5, [r0, #0]
 8005f52:	600b      	str	r3, [r1, #0]
 8005f54:	2d00      	cmp	r5, #0
 8005f56:	da03      	bge.n	8005f60 <_printf_i+0xc8>
 8005f58:	232d      	movs	r3, #45	; 0x2d
 8005f5a:	426d      	negs	r5, r5
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f60:	230a      	movs	r3, #10
 8005f62:	485e      	ldr	r0, [pc, #376]	; (80060dc <_printf_i+0x244>)
 8005f64:	e019      	b.n	8005f9a <_printf_i+0x102>
 8005f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f6a:	6805      	ldr	r5, [r0, #0]
 8005f6c:	600b      	str	r3, [r1, #0]
 8005f6e:	bf18      	it	ne
 8005f70:	b22d      	sxthne	r5, r5
 8005f72:	e7ef      	b.n	8005f54 <_printf_i+0xbc>
 8005f74:	680b      	ldr	r3, [r1, #0]
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	1d18      	adds	r0, r3, #4
 8005f7a:	6008      	str	r0, [r1, #0]
 8005f7c:	0628      	lsls	r0, r5, #24
 8005f7e:	d501      	bpl.n	8005f84 <_printf_i+0xec>
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <_printf_i+0xf2>
 8005f84:	0669      	lsls	r1, r5, #25
 8005f86:	d5fb      	bpl.n	8005f80 <_printf_i+0xe8>
 8005f88:	881d      	ldrh	r5, [r3, #0]
 8005f8a:	2f6f      	cmp	r7, #111	; 0x6f
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2308      	moveq	r3, #8
 8005f90:	230a      	movne	r3, #10
 8005f92:	4852      	ldr	r0, [pc, #328]	; (80060dc <_printf_i+0x244>)
 8005f94:	2100      	movs	r1, #0
 8005f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f9a:	6866      	ldr	r6, [r4, #4]
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	bfa8      	it	ge
 8005fa0:	6821      	ldrge	r1, [r4, #0]
 8005fa2:	60a6      	str	r6, [r4, #8]
 8005fa4:	bfa4      	itt	ge
 8005fa6:	f021 0104 	bicge.w	r1, r1, #4
 8005faa:	6021      	strge	r1, [r4, #0]
 8005fac:	b90d      	cbnz	r5, 8005fb2 <_printf_i+0x11a>
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d04d      	beq.n	800604e <_printf_i+0x1b6>
 8005fb2:	4616      	mov	r6, r2
 8005fb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fb8:	fb03 5711 	mls	r7, r3, r1, r5
 8005fbc:	5dc7      	ldrb	r7, [r0, r7]
 8005fbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fc2:	462f      	mov	r7, r5
 8005fc4:	42bb      	cmp	r3, r7
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	d9f4      	bls.n	8005fb4 <_printf_i+0x11c>
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d10b      	bne.n	8005fe6 <_printf_i+0x14e>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	07df      	lsls	r7, r3, #31
 8005fd2:	d508      	bpl.n	8005fe6 <_printf_i+0x14e>
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	6861      	ldr	r1, [r4, #4]
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	bfde      	ittt	le
 8005fdc:	2330      	movle	r3, #48	; 0x30
 8005fde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fe6:	1b92      	subs	r2, r2, r6
 8005fe8:	6122      	str	r2, [r4, #16]
 8005fea:	464b      	mov	r3, r9
 8005fec:	4621      	mov	r1, r4
 8005fee:	4640      	mov	r0, r8
 8005ff0:	f8cd a000 	str.w	sl, [sp]
 8005ff4:	aa03      	add	r2, sp, #12
 8005ff6:	f7ff fedf 	bl	8005db8 <_printf_common>
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d14c      	bne.n	8006098 <_printf_i+0x200>
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	b004      	add	sp, #16
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	4834      	ldr	r0, [pc, #208]	; (80060dc <_printf_i+0x244>)
 800600a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800600e:	680e      	ldr	r6, [r1, #0]
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	f856 5b04 	ldr.w	r5, [r6], #4
 8006016:	061f      	lsls	r7, r3, #24
 8006018:	600e      	str	r6, [r1, #0]
 800601a:	d514      	bpl.n	8006046 <_printf_i+0x1ae>
 800601c:	07d9      	lsls	r1, r3, #31
 800601e:	bf44      	itt	mi
 8006020:	f043 0320 	orrmi.w	r3, r3, #32
 8006024:	6023      	strmi	r3, [r4, #0]
 8006026:	b91d      	cbnz	r5, 8006030 <_printf_i+0x198>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	f023 0320 	bic.w	r3, r3, #32
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	2310      	movs	r3, #16
 8006032:	e7af      	b.n	8005f94 <_printf_i+0xfc>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f043 0320 	orr.w	r3, r3, #32
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	2378      	movs	r3, #120	; 0x78
 800603e:	4828      	ldr	r0, [pc, #160]	; (80060e0 <_printf_i+0x248>)
 8006040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006044:	e7e3      	b.n	800600e <_printf_i+0x176>
 8006046:	065e      	lsls	r6, r3, #25
 8006048:	bf48      	it	mi
 800604a:	b2ad      	uxthmi	r5, r5
 800604c:	e7e6      	b.n	800601c <_printf_i+0x184>
 800604e:	4616      	mov	r6, r2
 8006050:	e7bb      	b.n	8005fca <_printf_i+0x132>
 8006052:	680b      	ldr	r3, [r1, #0]
 8006054:	6826      	ldr	r6, [r4, #0]
 8006056:	1d1d      	adds	r5, r3, #4
 8006058:	6960      	ldr	r0, [r4, #20]
 800605a:	600d      	str	r5, [r1, #0]
 800605c:	0635      	lsls	r5, r6, #24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	d501      	bpl.n	8006066 <_printf_i+0x1ce>
 8006062:	6018      	str	r0, [r3, #0]
 8006064:	e002      	b.n	800606c <_printf_i+0x1d4>
 8006066:	0671      	lsls	r1, r6, #25
 8006068:	d5fb      	bpl.n	8006062 <_printf_i+0x1ca>
 800606a:	8018      	strh	r0, [r3, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	4616      	mov	r6, r2
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	e7ba      	b.n	8005fea <_printf_i+0x152>
 8006074:	680b      	ldr	r3, [r1, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	600a      	str	r2, [r1, #0]
 800607a:	681e      	ldr	r6, [r3, #0]
 800607c:	2100      	movs	r1, #0
 800607e:	4630      	mov	r0, r6
 8006080:	6862      	ldr	r2, [r4, #4]
 8006082:	f000 f82f 	bl	80060e4 <memchr>
 8006086:	b108      	cbz	r0, 800608c <_printf_i+0x1f4>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	6060      	str	r0, [r4, #4]
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	2300      	movs	r3, #0
 8006092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006096:	e7a8      	b.n	8005fea <_printf_i+0x152>
 8006098:	4632      	mov	r2, r6
 800609a:	4649      	mov	r1, r9
 800609c:	4640      	mov	r0, r8
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	47d0      	blx	sl
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0ab      	beq.n	8005ffe <_printf_i+0x166>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	079b      	lsls	r3, r3, #30
 80060aa:	d413      	bmi.n	80060d4 <_printf_i+0x23c>
 80060ac:	68e0      	ldr	r0, [r4, #12]
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	4298      	cmp	r0, r3
 80060b2:	bfb8      	it	lt
 80060b4:	4618      	movlt	r0, r3
 80060b6:	e7a4      	b.n	8006002 <_printf_i+0x16a>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4632      	mov	r2, r6
 80060bc:	4649      	mov	r1, r9
 80060be:	4640      	mov	r0, r8
 80060c0:	47d0      	blx	sl
 80060c2:	3001      	adds	r0, #1
 80060c4:	d09b      	beq.n	8005ffe <_printf_i+0x166>
 80060c6:	3501      	adds	r5, #1
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	9903      	ldr	r1, [sp, #12]
 80060cc:	1a5b      	subs	r3, r3, r1
 80060ce:	42ab      	cmp	r3, r5
 80060d0:	dcf2      	bgt.n	80060b8 <_printf_i+0x220>
 80060d2:	e7eb      	b.n	80060ac <_printf_i+0x214>
 80060d4:	2500      	movs	r5, #0
 80060d6:	f104 0619 	add.w	r6, r4, #25
 80060da:	e7f5      	b.n	80060c8 <_printf_i+0x230>
 80060dc:	080064e3 	.word	0x080064e3
 80060e0:	080064f4 	.word	0x080064f4

080060e4 <memchr>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	b510      	push	{r4, lr}
 80060e8:	b2c9      	uxtb	r1, r1
 80060ea:	4402      	add	r2, r0
 80060ec:	4293      	cmp	r3, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	d101      	bne.n	80060f6 <memchr+0x12>
 80060f2:	2000      	movs	r0, #0
 80060f4:	e003      	b.n	80060fe <memchr+0x1a>
 80060f6:	7804      	ldrb	r4, [r0, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	428c      	cmp	r4, r1
 80060fc:	d1f6      	bne.n	80060ec <memchr+0x8>
 80060fe:	bd10      	pop	{r4, pc}

08006100 <memcpy>:
 8006100:	440a      	add	r2, r1
 8006102:	4291      	cmp	r1, r2
 8006104:	f100 33ff 	add.w	r3, r0, #4294967295
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	4770      	bx	lr
 800610c:	b510      	push	{r4, lr}
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	4291      	cmp	r1, r2
 8006114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006118:	d1f9      	bne.n	800610e <memcpy+0xe>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memmove>:
 800611c:	4288      	cmp	r0, r1
 800611e:	b510      	push	{r4, lr}
 8006120:	eb01 0402 	add.w	r4, r1, r2
 8006124:	d902      	bls.n	800612c <memmove+0x10>
 8006126:	4284      	cmp	r4, r0
 8006128:	4623      	mov	r3, r4
 800612a:	d807      	bhi.n	800613c <memmove+0x20>
 800612c:	1e43      	subs	r3, r0, #1
 800612e:	42a1      	cmp	r1, r4
 8006130:	d008      	beq.n	8006144 <memmove+0x28>
 8006132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800613a:	e7f8      	b.n	800612e <memmove+0x12>
 800613c:	4601      	mov	r1, r0
 800613e:	4402      	add	r2, r0
 8006140:	428a      	cmp	r2, r1
 8006142:	d100      	bne.n	8006146 <memmove+0x2a>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614e:	e7f7      	b.n	8006140 <memmove+0x24>

08006150 <_free_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	2900      	cmp	r1, #0
 8006156:	d043      	beq.n	80061e0 <_free_r+0x90>
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f0c      	subs	r4, r1, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfb8      	it	lt
 8006162:	18e4      	addlt	r4, r4, r3
 8006164:	f000 f8d0 	bl	8006308 <__malloc_lock>
 8006168:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <_free_r+0x94>)
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	4610      	mov	r0, r2
 800616e:	b933      	cbnz	r3, 800617e <_free_r+0x2e>
 8006170:	6063      	str	r3, [r4, #4]
 8006172:	6014      	str	r4, [r2, #0]
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617a:	f000 b8cb 	b.w	8006314 <__malloc_unlock>
 800617e:	42a3      	cmp	r3, r4
 8006180:	d90a      	bls.n	8006198 <_free_r+0x48>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	1862      	adds	r2, r4, r1
 8006186:	4293      	cmp	r3, r2
 8006188:	bf01      	itttt	eq
 800618a:	681a      	ldreq	r2, [r3, #0]
 800618c:	685b      	ldreq	r3, [r3, #4]
 800618e:	1852      	addeq	r2, r2, r1
 8006190:	6022      	streq	r2, [r4, #0]
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6004      	str	r4, [r0, #0]
 8006196:	e7ed      	b.n	8006174 <_free_r+0x24>
 8006198:	461a      	mov	r2, r3
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	b10b      	cbz	r3, 80061a2 <_free_r+0x52>
 800619e:	42a3      	cmp	r3, r4
 80061a0:	d9fa      	bls.n	8006198 <_free_r+0x48>
 80061a2:	6811      	ldr	r1, [r2, #0]
 80061a4:	1850      	adds	r0, r2, r1
 80061a6:	42a0      	cmp	r0, r4
 80061a8:	d10b      	bne.n	80061c2 <_free_r+0x72>
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	4401      	add	r1, r0
 80061ae:	1850      	adds	r0, r2, r1
 80061b0:	4283      	cmp	r3, r0
 80061b2:	6011      	str	r1, [r2, #0]
 80061b4:	d1de      	bne.n	8006174 <_free_r+0x24>
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4401      	add	r1, r0
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e7d8      	b.n	8006174 <_free_r+0x24>
 80061c2:	d902      	bls.n	80061ca <_free_r+0x7a>
 80061c4:	230c      	movs	r3, #12
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	e7d4      	b.n	8006174 <_free_r+0x24>
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	1821      	adds	r1, r4, r0
 80061ce:	428b      	cmp	r3, r1
 80061d0:	bf01      	itttt	eq
 80061d2:	6819      	ldreq	r1, [r3, #0]
 80061d4:	685b      	ldreq	r3, [r3, #4]
 80061d6:	1809      	addeq	r1, r1, r0
 80061d8:	6021      	streq	r1, [r4, #0]
 80061da:	6063      	str	r3, [r4, #4]
 80061dc:	6054      	str	r4, [r2, #4]
 80061de:	e7c9      	b.n	8006174 <_free_r+0x24>
 80061e0:	bd38      	pop	{r3, r4, r5, pc}
 80061e2:	bf00      	nop
 80061e4:	200000f4 	.word	0x200000f4

080061e8 <_malloc_r>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	1ccd      	adds	r5, r1, #3
 80061ec:	f025 0503 	bic.w	r5, r5, #3
 80061f0:	3508      	adds	r5, #8
 80061f2:	2d0c      	cmp	r5, #12
 80061f4:	bf38      	it	cc
 80061f6:	250c      	movcc	r5, #12
 80061f8:	2d00      	cmp	r5, #0
 80061fa:	4606      	mov	r6, r0
 80061fc:	db01      	blt.n	8006202 <_malloc_r+0x1a>
 80061fe:	42a9      	cmp	r1, r5
 8006200:	d903      	bls.n	800620a <_malloc_r+0x22>
 8006202:	230c      	movs	r3, #12
 8006204:	6033      	str	r3, [r6, #0]
 8006206:	2000      	movs	r0, #0
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800620a:	f000 f87d 	bl	8006308 <__malloc_lock>
 800620e:	4921      	ldr	r1, [pc, #132]	; (8006294 <_malloc_r+0xac>)
 8006210:	680a      	ldr	r2, [r1, #0]
 8006212:	4614      	mov	r4, r2
 8006214:	b99c      	cbnz	r4, 800623e <_malloc_r+0x56>
 8006216:	4f20      	ldr	r7, [pc, #128]	; (8006298 <_malloc_r+0xb0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	b923      	cbnz	r3, 8006226 <_malloc_r+0x3e>
 800621c:	4621      	mov	r1, r4
 800621e:	4630      	mov	r0, r6
 8006220:	f000 f862 	bl	80062e8 <_sbrk_r>
 8006224:	6038      	str	r0, [r7, #0]
 8006226:	4629      	mov	r1, r5
 8006228:	4630      	mov	r0, r6
 800622a:	f000 f85d 	bl	80062e8 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d123      	bne.n	800627a <_malloc_r+0x92>
 8006232:	230c      	movs	r3, #12
 8006234:	4630      	mov	r0, r6
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	f000 f86c 	bl	8006314 <__malloc_unlock>
 800623c:	e7e3      	b.n	8006206 <_malloc_r+0x1e>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	1b5b      	subs	r3, r3, r5
 8006242:	d417      	bmi.n	8006274 <_malloc_r+0x8c>
 8006244:	2b0b      	cmp	r3, #11
 8006246:	d903      	bls.n	8006250 <_malloc_r+0x68>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	441c      	add	r4, r3
 800624c:	6025      	str	r5, [r4, #0]
 800624e:	e004      	b.n	800625a <_malloc_r+0x72>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	42a2      	cmp	r2, r4
 8006254:	bf0c      	ite	eq
 8006256:	600b      	streq	r3, [r1, #0]
 8006258:	6053      	strne	r3, [r2, #4]
 800625a:	4630      	mov	r0, r6
 800625c:	f000 f85a 	bl	8006314 <__malloc_unlock>
 8006260:	f104 000b 	add.w	r0, r4, #11
 8006264:	1d23      	adds	r3, r4, #4
 8006266:	f020 0007 	bic.w	r0, r0, #7
 800626a:	1ac2      	subs	r2, r0, r3
 800626c:	d0cc      	beq.n	8006208 <_malloc_r+0x20>
 800626e:	1a1b      	subs	r3, r3, r0
 8006270:	50a3      	str	r3, [r4, r2]
 8006272:	e7c9      	b.n	8006208 <_malloc_r+0x20>
 8006274:	4622      	mov	r2, r4
 8006276:	6864      	ldr	r4, [r4, #4]
 8006278:	e7cc      	b.n	8006214 <_malloc_r+0x2c>
 800627a:	1cc4      	adds	r4, r0, #3
 800627c:	f024 0403 	bic.w	r4, r4, #3
 8006280:	42a0      	cmp	r0, r4
 8006282:	d0e3      	beq.n	800624c <_malloc_r+0x64>
 8006284:	1a21      	subs	r1, r4, r0
 8006286:	4630      	mov	r0, r6
 8006288:	f000 f82e 	bl	80062e8 <_sbrk_r>
 800628c:	3001      	adds	r0, #1
 800628e:	d1dd      	bne.n	800624c <_malloc_r+0x64>
 8006290:	e7cf      	b.n	8006232 <_malloc_r+0x4a>
 8006292:	bf00      	nop
 8006294:	200000f4 	.word	0x200000f4
 8006298:	200000f8 	.word	0x200000f8

0800629c <_realloc_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	4607      	mov	r7, r0
 80062a0:	4614      	mov	r4, r2
 80062a2:	460e      	mov	r6, r1
 80062a4:	b921      	cbnz	r1, 80062b0 <_realloc_r+0x14>
 80062a6:	4611      	mov	r1, r2
 80062a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062ac:	f7ff bf9c 	b.w	80061e8 <_malloc_r>
 80062b0:	b922      	cbnz	r2, 80062bc <_realloc_r+0x20>
 80062b2:	f7ff ff4d 	bl	8006150 <_free_r>
 80062b6:	4625      	mov	r5, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062bc:	f000 f830 	bl	8006320 <_malloc_usable_size_r>
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d20f      	bcs.n	80062e4 <_realloc_r+0x48>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4638      	mov	r0, r7
 80062c8:	f7ff ff8e 	bl	80061e8 <_malloc_r>
 80062cc:	4605      	mov	r5, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0f2      	beq.n	80062b8 <_realloc_r+0x1c>
 80062d2:	4631      	mov	r1, r6
 80062d4:	4622      	mov	r2, r4
 80062d6:	f7ff ff13 	bl	8006100 <memcpy>
 80062da:	4631      	mov	r1, r6
 80062dc:	4638      	mov	r0, r7
 80062de:	f7ff ff37 	bl	8006150 <_free_r>
 80062e2:	e7e9      	b.n	80062b8 <_realloc_r+0x1c>
 80062e4:	4635      	mov	r5, r6
 80062e6:	e7e7      	b.n	80062b8 <_realloc_r+0x1c>

080062e8 <_sbrk_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	2300      	movs	r3, #0
 80062ec:	4d05      	ldr	r5, [pc, #20]	; (8006304 <_sbrk_r+0x1c>)
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb fcc0 	bl	8001c78 <_sbrk>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_sbrk_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_sbrk_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000504 	.word	0x20000504

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_lock+0x8>)
 800630a:	f000 b811 	b.w	8006330 <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	2000050c 	.word	0x2000050c

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_unlock+0x8>)
 8006316:	f000 b80c 	b.w	8006332 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	2000050c 	.word	0x2000050c

08006320 <_malloc_usable_size_r>:
 8006320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006324:	1f18      	subs	r0, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	bfbc      	itt	lt
 800632a:	580b      	ldrlt	r3, [r1, r0]
 800632c:	18c0      	addlt	r0, r0, r3
 800632e:	4770      	bx	lr

08006330 <__retarget_lock_acquire_recursive>:
 8006330:	4770      	bx	lr

08006332 <__retarget_lock_release_recursive>:
 8006332:	4770      	bx	lr

08006334 <_init>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	bf00      	nop
 8006338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633a:	bc08      	pop	{r3}
 800633c:	469e      	mov	lr, r3
 800633e:	4770      	bx	lr

08006340 <_fini>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr
